<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>yufeng.Zhou&#39;s Blog</title>
  
  <subtitle>卑鄙，是卑鄙者通行证，高尚，是高尚者墓志铭。</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yfzhou.coding.me/"/>
  <updated>2018-08-17T03:16:43.770Z</updated>
  <id>http://yfzhou.coding.me/</id>
  
  <author>
    <name>yufeng.Zhou</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Hexo-Next搭建个人博客（使用图床）</title>
    <link href="http://yfzhou.coding.me/2018/08/17/Hexo-Next%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2%EF%BC%88%E4%BD%BF%E7%94%A8%E5%9B%BE%E5%BA%8A%EF%BC%89/"/>
    <id>http://yfzhou.coding.me/2018/08/17/Hexo-Next搭建个人博客（使用图床）/</id>
    <published>2018-08-17T03:07:26.000Z</published>
    <updated>2018-08-17T03:16:43.770Z</updated>
    
    <content type="html"><![CDATA[<p>图片作为互联网服务中最基础的资源之一，随着互联网基础服务越来越专业化，图片的存储、处理、分发也发展成了一项独立的基础服务。试想一下，如果每家互联网公司都要花费大量人力物力去做图片相关的技术研发，哪还有时间去做自己的业务。专业的事情还是要交给专业的人来做。<br><a id="more"></a></p><p>图床，也就是专门提供存储图片的地方，我们只要通过图床提供的 API 接口，把图片上传上去，就可以通过外链访问了，根本不用操心图片是怎么存的，硬盘空间不够了，硬盘坏了，访问速度比较慢等等问题，这些图床都会帮我们搞定，他们会用各种技术帮我们做图片相关的优化和服务，比如多机互备、CDN 加速、图片处理、图片鉴黄、文本识别等等。</p><p>当然，图床也是有缺点的，当所有人都把图片存在同一个图床上，万一有一天图床真挂了，那所有图片就都无法访问了，虽然这种情况的概率很低，但并不等于不会发生。我就经历过云服务商机房被雷劈，网站都挂掉的情况。支付宝光缆不也被挖断过吗？不过，对于我们个人用户来说，要求也没那么高，图床已经完全能满足我们的需求了。</p><hr><p>目前图床可以分为两种，一种是公共图床，一种是自建图床。公共图床也就是利用公共服务的图片上传接口，来提供图片外链的服务，比如新浪微博。自建图床，也就是利用各大云服务商提供的存储空间或者自己在 VPS 上使用开源软件来搭建图床，存储图片，生成外链提供访问，比如七牛、Lychee 开源自建图床方案。  </p><h2 id="公共图床"><a href="#公共图床" class="headerlink" title="公共图床"></a>公共图床</h2><h3 id="微博图床"><a href="#微博图床" class="headerlink" title="微博图床"></a>微博图床</h3><p>由于微博本身就是面向公众提供服务，每个人发微博基本都得带上几张图片，以微博的体量，每天的新增图片数也不是个小数字。但是微博对于图片上传服务也没有接口说明文档，上传的接口还是在开发者们从微博产品里找出来的，可能微博只希望上传的图片仅仅用于微博产品本身吧。</p><p>微博图床的特点是免费，没有容量限制，全网 CDN 加速，支持 HTTPS，到哪里都很快。但是免费的服务也有不足的地方，上传的图片会被转成 jpg，图片中可能加上了肉眼难以识别的水印，另外微博的图片鉴别服务也可能会随时删除你的图片。</p><p>相关链接：</p><ul><li><p><a href="http://weibo.com/minipublish" target="_blank" rel="noopener">微博图床上传地址</a>：从这里直接上传图片比较麻烦，你可以使用下面介绍的一些图床工具，上传起来更方便。  </p></li><li><p><a href="http://picupload.service.weibo.com/interface/" target="_blank" rel="noopener">微博图床 API</a>：用浏览器当然是不能访问的，只提供图片上传。  </p></li></ul><h3 id="Imgur-图床"><a href="#Imgur-图床" class="headerlink" title="Imgur 图床"></a>Imgur 图床</h3><p><img src="https://cdn.sspai.com/2017/08/21/7d56369618ca55b7788a1f2b2469e274.png?imageView2/2/w/1120/q/90/interlace/1/ignore-error/1" alt="Imgur API"></p><p>Imgur API</p><p><a href="https://imgur.com/" target="_blank" rel="noopener">Imgur</a> 是一家国外老牌的图片存储服务商，国外速度很快，口碑不错，支持 HTTPS。但是国内速度很不稳定，所以追求国内速度的同学慎用。</p><p>相关链接：</p><ul><li><a href="https://apidocs.imgur.com/" target="_blank" rel="noopener">Imgur API</a>  </li></ul><h3 id="SM-MS-图床"><a href="#SM-MS-图床" class="headerlink" title="SM.MS 图床"></a>SM.MS 图床</h3><p><img src="https://cdn.sspai.com/2017/08/21/a78e40318ea02f94a0b9e2ea19d8b10e.png?imageView2/2/w/1120/q/90/interlace/1/ignore-error/1" alt="sm.ms 图床"></p><p>sm.ms 图床</p><p><a href="https://sm.ms/" target="_blank" rel="noopener">SM.MS</a> 是由 V2EX @<a href="https://www.v2ex.com/member/Showfom" target="_blank" rel="noopener">Showfom</a> 自建的，无外链限制，无流量限制的图床，支持 HTTPS，速度不错，已经运行两年多了。</p><p>相关链接：</p><ul><li><a href="https://sm.ms/doc/" target="_blank" rel="noopener">sm.ms API</a>  </li></ul><p>其它公共图床还有很多，一搜一大把，不过大部分规模都比较小，要不就是国内访问速度不理想，使用前最好先了解一下。</p><hr><p>目前自建图床方案有两种，一种是利用云服务商提供的存储服务来作为图床，通过 API 来管理图片，另一种是在 VPS 上安装开源的图片或文件管理程序，只要能提供外链，基本都可以作为图床来用。</p><h2 id="自建图床：云服务"><a href="#自建图床：云服务" class="headerlink" title="自建图床：云服务"></a>自建图床：云服务</h2><h3 id="七牛"><a href="#七牛" class="headerlink" title="七牛"></a>七牛</h3><p><img src="https://cdn.sspai.com/2017/08/21/2242e610efb14f6d63261547f3e90609.png?imageView2/2/w/1120/q/90/interlace/1/ignore-error/1" alt="七牛云"></p><p>七牛云</p><p><a href="https://portal.qiniu.com/signup?code=3lmd5t4axez4i" target="_blank" rel="noopener">七牛</a> 作为国内领先的云服务商，全网 CDN 加速，全国访问速度都不错，API 很详细，对开发者比较友好。免费用户提供 10GB 存储空间，国内和海外分别提供 10 GB 的 HTTP 免费流量，七牛的 HTTPS 流量是收费的，没有免费额度。此外，七牛还提供了针对图片的各种服务，包括图片裁剪，压缩，鉴黄等等衍生服务。如果你觉得图片尺寸太大，可以在外链后面添加参数，访问的时候七牛会自动根据你的参数对图片进行处理。</p><p>目前我的图片都存在七牛上，使用 HTTPS 外链，每个月支出也就几块钱，就为了博客上那个小绿锁 😆。</p><p>相关链接：</p><ul><li><p><a href="https://developer.qiniu.com/" target="_blank" rel="noopener">七牛云 API 文档</a>  </p></li><li><p><a href="https://www.qiniu.com/prices" target="_blank" rel="noopener">七牛价格</a>  </p></li></ul><h3 id="又拍云"><a href="#又拍云" class="headerlink" title="又拍云"></a>又拍云</h3><p><img src="https://cdn.sspai.com/2017/08/21/9f1b5842c3ab1b8bc29e5fdbce49a972.png?imageView2/2/w/1120/q/90/interlace/1/ignore-error/1" alt="又拍云"></p><p>又拍云</p><p><a href="https://www.upyun.com/" target="_blank" rel="noopener">又拍云</a> 也算是国内比较有名的云服务商了，国内拥有 200+ 的自建 CDN 节点，国内速度也不错，API 很详细，不过对于普通用户没有免费额度，目前实行的是「按照用户每日实际消耗的 CDN 流量，实行 1:1 的存储空间费免费使用」。</p><p>相关链接：</p><ul><li><p><a href="http://docs.upyun.com/guide/#api" target="_blank" rel="noopener">又拍云 API 文档</a>  </p></li><li><p><a href="https://www.upyun.com/pricing" target="_blank" rel="noopener">又拍云价格</a>  </p></li></ul><h3 id="阿里云-OSS"><a href="#阿里云-OSS" class="headerlink" title="阿里云 OSS"></a>阿里云 OSS</h3><p><img src="https://cdn.sspai.com/2017/08/21/dea389e72df9a46289eaa24b3d88aee4.png?imageView2/2/w/1120/q/90/interlace/1/ignore-error/1" alt="阿里云 OSS"></p><p>阿里云 OSS</p><p><a href="https://www.aliyun.com/price/product#/oss/detail" target="_blank" rel="noopener">阿里云 OSS</a>（Object Storage Service），即阿里云对象存储服务，也可以作为图床，速度国内国外都不错，SDK 和 API 都很完善，收费也不算太贵，就是计费方案太复杂，目前费用包括：存储费用+流量费用+接口调用费用+数据处理，而且还分时段，地区，阶梯计费。可以选择包年包月和按量付费，具体价格和文档可以查看下面的官网介绍。</p><p>相关链接：</p><ul><li><p><a href="https://promotion.aliyun.com/ntms/act/ossdoclist.html" target="_blank" rel="noopener">阿里云 OSS 文档</a>  </p></li><li><p><a href="https://www.aliyun.com/price/product#/oss/detail" target="_blank" rel="noopener">阿里云 OSS 价格</a>  </p></li></ul><h2 id="自建图床：开源方案"><a href="#自建图床：开源方案" class="headerlink" title="自建图床：开源方案"></a>自建图床：开源方案</h2><p>如果你有 VPS，并且网络速度 OK 的话，自建图床也是一个不错的选择。</p><h3 id="Lychee"><a href="#Lychee" class="headerlink" title="Lychee"></a>Lychee</h3><p><img src="https://cdn.sspai.com/2017/08/21/5d4f0efa178487d54309f3da47d75e6e.jpeg?imageView2/2/w/1120/q/90/interlace/1/ignore-error/1" alt="Lychee"></p><p>Lychee</p><p><a href="https://github.com/electerious/Lychee" target="_blank" rel="noopener">Lychee</a> 是一个开源免费的基于 PHP 的图片管理系统，支持 Docker 部署，可以直接当做图床来用，Lychee 还支持很多扩展。</p><h3 id="树洞外链"><a href="#树洞外链" class="headerlink" title="树洞外链"></a>树洞外链</h3><p><img src="https://cdn.sspai.com/2017/08/21/d916ed36a802e3e878e95d556bd64ef3.png?imageView2/2/w/1120/q/90/interlace/1/ignore-error/1" alt="树洞外链"></p><p>树洞外链</p><p><a href="https://yun.aoaoao.me/" target="_blank" rel="noopener">树洞外链</a> 是一款免费开源的 PHP 外链网盘系统，界面简洁友好，支持七牛、本地、远程、阿里云OSS、又拍云五种储存方式，支持多用户系统，多上传方案策略。</p><p>相关链接：</p><ul><li><a href="https://file.aoaoao.me/" target="_blank" rel="noopener">演示站点</a>  </li></ul><h2 id="上传工具"><a href="#上传工具" class="headerlink" title="上传工具"></a>上传工具</h2><p>对普通用户来说，直接使用图床 API 很麻烦，我们可以借助一些工具方便的上传图片，下面就根据 macOS、Windows、Web 分别推荐几款工具。</p><h3 id="iPic"><a href="#iPic" class="headerlink" title="iPic"></a>iPic</h3><p><img src="https://cdn.sspai.com/attachment/origin/2016/07/04/336030.png" alt=""></p><h4 id="iPic-1"><a href="#iPic-1" class="headerlink" title="iPic"></a>iPic</h4><p>Mac</p><p><a href="https://sspai.com/app/iPic" target="_blank" rel="noopener">相关文章</a></p><p>下载</p><ul><li><a href="https://itunes.apple.com/cn/app/ipic-tu-chuang-shen-qi/id1101244278?mt=12&amp;uo=4&amp;at=10lJSw&amp;ct=appcards" target="_blank" rel="noopener">Mac</a></li></ul><p><a href="https://itunes.apple.com/cn/app/id1101244278?ls=1&amp;mt=12" target="_blank" rel="noopener">iPic</a> 是 macOS 上口碑最好的图床工具，支持 微博图床、七牛、阿里云 OSS、又拍云、Imgur、Flickr 等常见图床，支持拖拽、快捷键、剪贴板上传，支持上传前压缩，上传完毕自动生成 Markdown 并拷贝到剪贴板。如果你想迁移图床，开发者 <a href="https://slarker.me/image-oss/toolinbox.net" target="_blank" rel="noopener">@jason</a> 还做了一款 <a href="https://toolinbox.net/iPic/iPicMover.html" target="_blank" rel="noopener">图床迁移工具 iPic Mover</a> 来帮助你。此外，简洁优雅的 Markdown 工具 <a href="https://typora.io/" target="_blank" rel="noopener">Typora</a>也内嵌了 iPic 的上传服务，如果你也使用 Typora 的话，能感觉到这俩工具简直是绝配。</p><h3 id="MWeb"><a href="#MWeb" class="headerlink" title="MWeb"></a>MWeb</h3><p><img src="https://cdn.sspai.com/attachment/origin/2017/01/23/364951.png" alt=""></p><h4 id="MWeb-1"><a href="#MWeb-1" class="headerlink" title="MWeb"></a>MWeb</h4><p>iOS</p><p><a href="https://sspai.com/app/MWeb" target="_blank" rel="noopener">相关文章</a></p><p>下载</p><ul><li><a href="https://itunes.apple.com/cn/app/mweb-pro-markdown-writing/id1183407767?mt=8&amp;uo=4&amp;at=10lJSw&amp;ct=appcards" target="_blank" rel="noopener">iOS 通用</a></li><li><a href="https://itunes.apple.com/cn/app/mweb-zhuan-ye-demarkdown-xie/id954188948?mt=12&amp;uo=4&amp;at=10lJSw&amp;ct=appcards" target="_blank" rel="noopener">Mac</a></li></ul><p><img src="https://cdn.sspai.com/2017/08/21/a2229ac36e94260816e5423f5ceeba09.png?imageView2/2/w/1120/q/90/interlace/1/ignore-error/1" alt="MWeb 中的图床支持"></p><p>MWeb 中的图床支持</p><p>如果你只是码字的时候才用到图床，那可能 <a href="http://zh.mweb.im/" target="_blank" rel="noopener">MWeb</a> 也能满足你的需求，MWeb 支持七牛、imgur、Google Photos，还支持自定义图床，写作的时候只需要将图片拖进来，写作完成一键上传所有图片，也很方便。</p><h3 id="Dropzone-3"><a href="#Dropzone-3" class="headerlink" title="Dropzone 3"></a>Dropzone 3</h3><p><img src="https://cdn.sspai.com/attachment/origin/2015/12/14/298954.png" alt=""></p><h4 id="Dropzone-3-1"><a href="#Dropzone-3-1" class="headerlink" title="Dropzone 3"></a>Dropzone 3</h4><p>Mac</p><p><a href="https://sspai.com/app/Dropzone 3" target="_blank" rel="noopener">相关文章</a></p><p>下载</p><ul><li><a href="https://itunes.apple.com/cn/app/dropzone-3/id695406827?mt=12&amp;ign-mpt=uo%3D4&amp;uo=4&amp;at=10lJSw&amp;ct=appcards" target="_blank" rel="noopener">Mac</a></li></ul><p><a href="https://itunes.apple.com/us/app/dropzone-3/id695406827?mt=12" target="_blank" rel="noopener">Dropzone 3</a> 也可以通过 <a href="https://kyleduo.com/" target="_blank" rel="noopener">七牛插件</a> 来支持上传图片，和 MWeb 类似，具体教程可以看 <a href="https://blog.kyleduo.com/2017/02/27/qiniu-upload-for-dropzone/#more" target="_blank" rel="noopener">这里</a>。</p><h3 id="MPic"><a href="#MPic" class="headerlink" title="MPic"></a>MPic</h3><p><img src="https://cdn.sspai.com/2017/08/21/ff144a6f126b6e608b93b5ba06013e14.png?imageView2/2/w/1120/q/90/interlace/1/ignore-error/1" alt="MPic"></p><p>MPic</p><p><a href="http://mpic.lzhaofu.cn/" target="_blank" rel="noopener">MPic</a> 目测是 Windows 上唯一的图床工具了，目前只支持七牛，把图片拖拽到软件窗口中就能上传。</p><h3 id="Web"><a href="#Web" class="headerlink" title="Web"></a>Web</h3><p>使用 Web 技术开发的图床工具一抓一大把，大部分都基于七牛和微博图床 API，这里就介绍两个体验不错的吧：</p><ul><li><p><a href="http://yotuku.cn/" target="_blank" rel="noopener">极简图床</a>：默认公共图床使用 sm.ms、微博图床，可以自定义支持七牛，界面简洁美观，支持 <a href="https://chrome.google.com/webstore/detail/heebflcbemenefckkgfnnklbhdbdkagg" target="_blank" rel="noopener">Chrome 插件</a>，注册后还可以同步上传历史。  </p></li><li><p><a href="https://chrome.google.com/webstore/detail/%E6%96%B0%E6%B5%AA%E5%BE%AE%E5%8D%9A%E5%9B%BE%E5%BA%8A/fdfdnfpdplfbbnemmmoklbfjbhecpnhf/reviews" target="_blank" rel="noopener">微博图床 Chroem 扩展</a>：开源的图床工具，只支持微博图床，使用起来也很方便，可以批量上传，管理上传历史。  </p></li></ul><h3 id="脚本"><a href="#脚本" class="headerlink" title="脚本"></a>脚本</h3><p>如果你对上面推荐的产品不满意，并且你会折腾的话，可以使用这个脚本来完成图片上传：<a href="https://github.com/tiann/markdown-img-upload" target="_blank" rel="noopener">Markdown 图片实用工具</a></p><p>该脚本使用 Python 版的七牛 SDK 来实现上传功能，你可以按照相关介绍，搭配 Alfred 来快速完成图片上传。</p><hr><p>图床服务最重要的是稳定性，大厂的云服务也都比较有保障，大家只要考虑下价格和易用性就可以了。就我个人而言，我首先推荐七牛，它的价格比较厚道，免费用户也有一定额度，数据可以自己掌控，另外各大平台的图床工具也基本都支持，易用性很高。其次推荐微博图床，对于不是很重要的图片，都可以存到微博图床，毕竟流量存储都免费，速度也不错。至于图床工具，就看自己的喜好了，只要顺手就行。但是不论选择哪一个服务或者工具，我觉得首先要自己可以掌控数据。</p><p>总之，适合自己的才是最好的。如果你还有其它好用的工具或者图床服务，欢迎留言给我，我会补充进来。</p><hr><p><a href="http://mpic.lzhaofu.cn/" target="_blank" rel="noopener">《图床神器》</a></p><p><a href="https://pic.xiaojianjian.net/" target="_blank" rel="noopener">《小贱贱图床》</a></p><p><a href="https://sm.ms/" target="_blank" rel="noopener">《SM.SMb》</a></p><p><a href="https://sspai.com/post/40499" target="_blank" rel="noopener">《嗯，图片就交给它了》</a></p><hr>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;图片作为互联网服务中最基础的资源之一，随着互联网基础服务越来越专业化，图片的存储、处理、分发也发展成了一项独立的基础服务。试想一下，如果每家互联网公司都要花费大量人力物力去做图片相关的技术研发，哪还有时间去做自己的业务。专业的事情还是要交给专业的人来做。&lt;br&gt;
    
    </summary>
    
      <category term="Hexo" scheme="http://yfzhou.coding.me/categories/Hexo/"/>
    
    
      <category term="Hexo" scheme="http://yfzhou.coding.me/tags/Hexo/"/>
    
      <category term="Next" scheme="http://yfzhou.coding.me/tags/Next/"/>
    
  </entry>
  
  <entry>
    <title>InnoDB并发如此高，原因竟然在这？</title>
    <link href="http://yfzhou.coding.me/2018/08/14/InnoDB%E5%B9%B6%E5%8F%91%E5%A6%82%E6%AD%A4%E9%AB%98%EF%BC%8C%E5%8E%9F%E5%9B%A0%E7%AB%9F%E7%84%B6%E5%9C%A8%E8%BF%99%EF%BC%9F/"/>
    <id>http://yfzhou.coding.me/2018/08/14/InnoDB并发如此高，原因竟然在这？/</id>
    <published>2018-08-14T10:07:19.000Z</published>
    <updated>2018-08-15T13:50:38.879Z</updated>
    
    <content type="html"><![CDATA[<p>此文摘自微信公众号【架构师之路】</p><p>微信扫一扫<br>关注该公众号</p><p><img src="https://mp.weixin.qq.com/mp/qrcode?scene=10000004&amp;size=102&amp;__biz=MjM5ODYxMDA5OQ==&amp;mid=2651961431&amp;idx=1&amp;sn=4f46fbada3d99ca6cf74b305d06c1ac6&amp;send_time=" alt=""><br><a id="more"></a></p><p>《<a href="http://mp.weixin.qq.com/s?__biz=MjM5ODYxMDA5OQ==&amp;mid=2651961431&amp;idx=1&amp;sn=4f46fbada3d99ca6cf74b305d06c1ac6&amp;chksm=bd2d0d8b8a5a849d8cb5a616c957abde7a6485cd2624372b84a5459eed081bd95429a09572f8&amp;scene=21#wechat_redirect" target="_blank" rel="noopener">InnoDB行锁，如何锁住一条不存在的记录？</a>》埋了一个坑，没想到评论反响剧烈，大家都希望深挖下去。原计划写写InnoDB的锁结束这个case，既然呼声这么高，干脆全盘<strong>系统性</strong>的写写InnoDB的<strong>并发控制</strong>，<strong>锁</strong>，<strong>事务模型</strong>好了。</p><p>体系相对宏大，一篇肯定写不完，容我娓娓道来，通俗地说清楚来龙去脉。</p><p><strong>一、并发控制</strong></p><p><strong>为啥要进行并发控制？</strong></p><p>并发的任务对同一个临界资源进行操作，如果不采取措施，可能导致不一致，故必须进行<strong>并发控制</strong>（Concurrency Control）。</p><p><strong>技术上，通常如何进行并发控制？</strong></p><p>通过并发控制保证数据一致性的常见手段有：</p><ul><li><p>锁（Locking）</p></li><li><p>数据多版本（Multi Versioning）</p></li></ul><p><strong>二、锁</strong></p><p><strong>如何使用普通锁保证一致性？</strong></p><p>普通锁，被使用最多：</p><p>(1)<span style="font-family: 宋体;font-size: 14px;letter-spacing: 1px;color: rgb(255, 76, 0);">操作数据前，锁住，实施互斥</span>，不允许其他的并发任务操作；</p><p>(2)操作完成后，释放锁，让其他任务执行；</p><p>如此这般，来保证一致性。</p><p><strong>普通锁存在什么问题？</strong></p><p>简单的锁住太过粗暴，连“读任务”也无法并行，任务执行过程本质上是串行的。</p><p>于是出现了<strong>共享锁</strong>与<strong>排他锁</strong>：</p><ul><li><p>共享锁（<span style="color: rgb(255, 76, 0);"><strong><span style="letter-spacing: 1px;font-size: 12px;">S</span></strong></span>hare Locks，记为S锁），读取数据时加S锁</p></li><li><p>排他锁（e<span style="color: rgb(255, 76, 0);"><strong><span style="letter-spacing: 1px;font-size: 12px;">X</span></strong></span>clusive Locks，记为X锁），修改数据时加X锁</p></li></ul><p>共享锁与排他锁的玩法是：</p><ul><li><p><span style="font-family: 宋体;font-size: 14px;letter-spacing: 1px;color: rgb(255, 76, 0);">共享锁之间不互斥</span>，简记为：<span style="font-family: 宋体;font-size: 14px;letter-spacing: 1px;color: rgb(255, 76, 0);">读读可以并行</span></p></li><li><p><span style="font-family: 宋体;font-size: 14px;letter-spacing: 1px;color: rgb(255, 76, 0);">排他锁与任何锁互斥</span>，简记为：<span style="font-family: 宋体;font-size: 14px;letter-spacing: 1px;color: rgb(255, 76, 0);">写读，写写不可以并行</span></p></li></ul><p>可以看到，一旦写数据的任务没有完成，数据是不能被其他任务读取的，这对并发度有较大的影响。</p><p><span style="color: rgb(0, 82, 255);"><em><span style="font-family: 宋体;font-size: 14px;letter-spacing: 1px;">画外音：<span style="font-family: 宋体;font-size: 14px;letter-spacing: 1px;">对应到数据库，可以理解为，写事务没有提交，读相关数据的</span></span><span style="font-family: 宋体;letter-spacing: 1px;font-size: 12px;">select</span><span style="font-family: 宋体;font-size: 14px;letter-spacing: 1px;">也会被阻塞。</span></em></span></p><p><strong>有没有可能，进一步提高并发呢？</strong></p><p>即使写任务没有完成，其他读任务也可能并发，这就引出了数据多版本。</p><p><strong>三、数据多版本</strong></p><p><span style="font-family: 宋体;font-size: 14px;letter-spacing: 1px;color: rgb(255, 76, 0);">数据多版本</span>是一种能够进一步提高并发的方法，它的<strong>核心原理</strong>是：</p><p>（1）写任务发生时，将数据克隆一份，以版本号区分；</p><p>（2）写任务操作新克隆的数据，直至提交；</p><p>（3）并发读任务可以继续读取旧版本的数据，不至于阻塞；</p><p><img src="https://yfzhou.oss-cn-beijing.aliyuncs.com/blog/img/222481745858779089.jpg" alt=""></p><p>如上图：</p><ol><li><p>最开始数据的版本是V0；</p></li><li><p>T1时刻发起了一个写任务，这是把数据clone了一份，进行修改，版本变为V1，但任务还未完成；</p></li><li><p>T2时刻并发了一个读任务，依然可以读V0版本的数据；</p></li><li><p>T3时刻又并发了一个读任务，依然不会阻塞；</p></li></ol><p>可以看到，数据多版本，通过“读取旧版本数据”能够极大提高任务的并发度。</p><p>提高并发的演进思路，就在如此：</p><ul><li><p><strong>普通锁</strong>，本质是<span style="font-size: 14px;letter-spacing: 1px;color: rgb(255, 76, 0);">串行</span>执行</p></li><li><p><strong>读写锁</strong>，可以实现<span style="font-size: 14px;letter-spacing: 1px;color: rgb(255, 76, 0);">读读并发</span></p></li><li><p><strong>数据多版本</strong>，可以实现<span style="font-size: 14px;letter-spacing: 1px;color: rgb(255, 76, 0);">读写并发</span></p></li></ul><p><span style="color: rgb(0, 82, 255);"><em><span style="font-family: 宋体;font-size: 14px;letter-spacing: 1px;">画外音：这个思路，比整篇文章的其他技术细节更重要，希望大家牢记。</span></em></span></p><p>好，对应到InnoDB上，具体是怎么玩的呢？</p><p><strong>四、redo, undo,**</strong>回滚段**</p><p>在进一步介绍InnoDB如何使用“读取旧版本数据”极大提高任务的并发度之前，有必要先介绍下redo日志，undo日志，回滚段（rollback segment）。</p><p><strong>为什么要有redo**</strong>日志？**</p><p>数据库事务提交后，必须将更新后的数据刷到磁盘上，以保证ACID特性。磁盘<strong>随机写</strong>性能较低，如果每次都刷盘，会极大影响数据库的吞吐量。</p><p>优化方式是，将修改行为先写到redo日志里（此时变成了<strong>顺序写</strong>），再定期将数据刷到磁盘上，这样能极大提高性能。</p><p><span style="color: rgb(0, 82, 255);"><em><span style="font-family: 宋体;font-size: 14px;letter-spacing: 1px;">画外音：这里的架构设计方法是，<strong>随机写优化为顺序写</strong>，思路更重要。</span></em></span></p><p>假如某一时刻，数据库崩溃，还没来得及刷盘的数据，在数据库重启后，会重做redo日志里的内容，以保证已提交事务对数据产生的影响都刷到磁盘上。</p><p><strong>一句话</strong>，<span style="font-size: 14px;letter-spacing: 1px;color: rgb(255, 76, 0);">redo<span style="letter-spacing: 1px;font-size: 14px;font-family: 宋体;">日志</span></span>用于保障，<span style="font-size: 14px;letter-spacing: 1px;color: rgb(255, 76, 0);"><span style="letter-spacing: 1px;font-size: 14px;font-family: 宋体;">已提交事务的</span>ACID<span style="letter-spacing: 1px;font-size: 14px;font-family: 宋体;">特性</span></span>。</p><p><strong>为什么要有undo**</strong>日志？**</p><p>数据库事务未提交时，会将事务修改数据的镜像（即修改前的旧版本）存放到undo日志里，当事务回滚时，或者数据库奔溃时，可以利用undo日志，即旧版本数据，撤销未提交事务对数据库产生的影响。</p><p><span style="color: rgb(0, 82, 255);"><em><span style="font-family: 宋体;font-size: 14px;letter-spacing: 1px;">画外音：更细节的，</span></em></span></p><p><span style="color: rgb(0, 82, 255);"><em><span style="color: rgb(0, 82, 255);font-size: 14px;letter-spacing: 1px;"><span style="color: rgb(0, 82, 255);letter-spacing: 1px;font-size: 14px;font-family: 宋体;">对于</span><strong>insert<span style="color: rgb(0, 82, 255);letter-spacing: 1px;font-size: 14px;font-family: 宋体;">操作</span></strong><span style="color: rgb(0, 82, 255);letter-spacing: 1px;font-size: 14px;font-family: 宋体;">，</span>undo<span style="color: rgb(0, 82, 255);letter-spacing: 1px;font-size: 14px;font-family: 宋体;">日志记录新数据的</span>PK(ROW_ID)<span style="color: rgb(0, 82, 255);letter-spacing: 1px;font-size: 14px;font-family: 宋体;">，回滚时直接删除；</span></span></em></span></p><p><span style="color: rgb(0, 82, 255);"><em><span style="color: rgb(0, 82, 255);font-size: 14px;letter-spacing: 1px;"><span style="color: rgb(0, 82, 255);letter-spacing: 1px;font-size: 14px;font-family: 宋体;">对于</span><strong>delete/update<span style="color: rgb(0, 82, 255);letter-spacing: 1px;font-size: 14px;font-family: 宋体;">操作</span></strong><span style="color: rgb(0, 82, 255);letter-spacing: 1px;font-size: 14px;font-family: 宋体;">，</span>undo<span style="color: rgb(0, 82, 255);letter-spacing: 1px;font-size: 14px;font-family: 宋体;">日志记录旧数据</span>row<span style="color: rgb(0, 82, 255);letter-spacing: 1px;font-size: 14px;font-family: 宋体;">，回滚时直接恢复；</span></span></em></span></p><p><span style="color: rgb(0, 82, 255);"><em><span style="color: rgb(0, 82, 255);font-size: 14px;letter-spacing: 1px;"><span style="color: rgb(0, 82, 255);letter-spacing: 1px;font-size: 14px;font-family: 宋体;">他们分别存放在不同的</span>buffer<span style="color: rgb(0, 82, 255);letter-spacing: 1px;font-size: 14px;font-family: 宋体;">里。</span></span></em></span></p><p><strong>一句话</strong>，<span style="font-size: 14px;letter-spacing: 1px;color: rgb(255, 76, 0);">undo<span style="letter-spacing: 1px;font-size: 14px;font-family: 宋体;">日志</span></span>用于保障，<span style="font-size: 14px;letter-spacing: 1px;color: rgb(255, 76, 0);">未提交事务不会对数据库的ACID特性</span>产生影响。</p><p><strong>什么是回滚段？</strong></p><p>存储undo日志的地方，是回滚段。</p><p>undo日志和回滚段和InnoDB的MVCC密切相关，这里举个例子展开说明一下。</p><p><strong>栗子</strong>：<br><figure class="highlight lisp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="literal">t</span>(<span class="name">id</span> PK, name)<span class="comment">;</span></span><br></pre></td></tr></table></figure></p><p>数据为：<br><figure class="highlight lsl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1</span>, shenjian</span><br><span class="line"><span class="number">2</span>, zhangsan</span><br><span class="line"><span class="number">3</span>, lisi</span><br></pre></td></tr></table></figure></p><p><img src="https://yfzhou.oss-cn-beijing.aliyuncs.com/blog/img/854310171767639185.jpg" alt="">  </p><p>此时没有事务未提交，故回滚段是空的。</p><p>接着启动了一个事务：<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">start</span> trx;</span><br><span class="line"><span class="keyword">delete</span> (<span class="number">1</span>, shenjian);</span><br><span class="line"><span class="keyword">update</span> <span class="keyword">set</span>(<span class="number">3</span>, lisi) <span class="keyword">to</span> (<span class="number">3</span>, xxx);</span><br><span class="line"><span class="keyword">insert</span> (<span class="number">4</span>, wangwu);</span><br></pre></td></tr></table></figure></p><p>并且事务处于<span style="font-family: 宋体;font-size: 14px;letter-spacing: 1px;color: rgb(255, 76, 0);">未提交</span>的状态。</p><p><img src="https://yfzhou.oss-cn-beijing.aliyuncs.com/blog/img/76916220599096767.jpg" alt=""></p><p>可以看到：</p><p>(1)被<span style="font-family: 宋体;font-size: 14px;letter-spacing: 1px;color: rgb(255, 76, 0);">删除前</span>的(1, shenjian)作为旧版本数据，进入了回滚段；</p><p>(2)被<span style="font-family: 宋体;font-size: 14px;letter-spacing: 1px;color: rgb(255, 76, 0);">修改前</span>的(3, lisi)作为旧版本数据，进入了回滚段；</p><p>(3)被<span style="font-family: 宋体;font-size: 14px;letter-spacing: 1px;color: rgb(255, 76, 0);">插入的</span>数据，PK(4)进入了回滚段；</p><p>接下来，假如事务rollback，此时可以通过回滚段里的undo日志回滚。</p><p><span style="color: rgb(0, 82, 255);"><em><span style="font-size: 14px;letter-spacing: 1px;"><span style="letter-spacing: 1px;font-size: 14px;font-family: 宋体;">画外音：假设事务提交，回滚段里的</span>undo<span style="letter-spacing: 1px;font-size: 14px;font-family: 宋体;">日志可以删除。</span></span></em></span></p><p><img src="https://yfzhou.oss-cn-beijing.aliyuncs.com/blog/img/138982544617441980.jpg" alt=""></p><p>可以看到：</p><p>(1)被删除的旧数据恢复了；</p><p>(2)被修改的旧数据也恢复了；</p><p>(3)被插入的数据，删除了；</p><p><img src="https://yfzhou.oss-cn-beijing.aliyuncs.com/blog/img/319830267672366053.jpg" alt="">  </p><p>事务回滚成功，一切如故。</p><p><strong>四、InnoDB**</strong>是基于多版本并发控制的存储引擎**</p><p>《<a href="http://mp.weixin.qq.com/s?__biz=MjM5ODYxMDA5OQ==&amp;mid=2651961428&amp;idx=1&amp;sn=31a9eb967941d888fbd4bb2112e9602b&amp;chksm=bd2d0d888a5a849e7ebaa7756a8bc1b3d4e2f493f3a76383fc80f7e9ce7657e4ed2f6c01777d&amp;scene=21#wechat_redirect" target="_blank" rel="noopener">大数据量，高并发量的互联网业务，一定要使用InnoDB</a>》提到，InnoDB是高并发互联网场景最为推荐的存储引擎，根本原因，就是其<strong>多版本并发控制</strong>（Multi Version Concurrency Control, MVCC）。<span style="font-family: 宋体;font-size: 14px;letter-spacing: 1px;color: rgb(255, 76, 0);">行锁，并发，事务回滚</span>等多种特性都和MVCC相关。</p><p>MVCC就是通过“读取旧版本数据”来降低并发事务的锁冲突，提高任务的并发度。</p><p><strong>核心问题：</strong></p><p><strong>旧版本数据存储在哪里？</strong></p><p><strong>存储旧版本数据，对MySQL**</strong>和InnoDB<strong>**原有架构是否有巨大冲击？</strong></p><p>通过上文<span style="font-size: 14px;letter-spacing: 1px;color: rgb(255, 76, 0);">undo<span style="letter-spacing: 1px;font-size: 14px;font-family: 宋体;">日志</span></span>和<span style="font-size: 14px;letter-spacing: 1px;color: rgb(255, 76, 0);">回滚段</span>的铺垫，这两个问题就非常好回答了：</p><p>(1)旧版本数据存储在回滚段里；</p><p>(2)对MySQL和InnoDB原有架构体系冲击不大；</p><p>InnoDB的内核，会对所有row数据增加三个内部属性：</p><p>(1)<strong>DB_TRX_ID</strong>，6字节，记录每一行最近一次修改它的事务ID；</p><p>(2)<strong>DB_ROLL_PTR</strong>，7字节，记录指向回滚段undo日志的指针；</p><p>(3)<strong>DB_ROW_ID</strong>，6字节，单调递增的行ID；</p><p><strong>InnoDB**</strong>为何能够做到这么高的并发？**</p><p>回滚段里的数据，其实是历史数据的<span style="letter-spacing: 1px;font-size: 14px;font-family: 宋体;color: rgb(255, 76, 0);">快照</span>（snapshot），这些数据是不会被修改，select可以肆无忌惮的并发读取他们。</p><p><strong>快照读</strong>（Snapshot Read），这种<strong>一致性不加锁的读</strong>（Consistent Nonlocking Read），就是<span style="font-size: 14px;letter-spacing: 1px;color: rgb(255, 76, 0);">InnoDB<span style="letter-spacing: 1px;font-size: 14px;font-family: 宋体;">并发如此之高的核心原因之一</span></span>。</p><p>这里的<strong>一致性</strong>是指，事务读取到的数据，要么是事务开始前就已经存在的数据（当然，是其他已提交事务产生的），要么是事务自身插入或者修改的数据。</p><p><strong>什么样的select**</strong>是快照读？**</p><p>除非显示加锁，<span style="font-size: 14px;letter-spacing: 1px;color: rgb(255, 76, 0);"><span style="letter-spacing: 1px;font-size: 14px;font-family: 宋体;">普通的</span>select<span style="letter-spacing: 1px;font-size: 14px;font-family: 宋体;">语句都是快照读</span></span>，例如：<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> * <span class="keyword">from</span> t <span class="keyword">where</span> <span class="keyword">id</span>&gt;<span class="number">2</span>;</span><br></pre></td></tr></table></figure></p><p>这里的<span style="font-family: 宋体;font-size: 14px;letter-spacing: 1px;color: rgb(255, 76, 0);">显示加锁，非快照读</span>是指：<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> * <span class="keyword">from</span> t <span class="keyword">where</span> <span class="keyword">id</span>&gt;<span class="number">2</span> **<span class="keyword">lock</span> <span class="keyword">in</span> <span class="keyword">share</span> <span class="keyword">mode</span>**;</span><br><span class="line"><span class="keyword">select</span> * <span class="keyword">from</span> t <span class="keyword">where</span> <span class="keyword">id</span>&gt;<span class="number">2</span> **<span class="keyword">for</span> <span class="keyword">update</span>**;</span><br></pre></td></tr></table></figure></p><p>问题来了，这些显示加锁的读，是什么读？会加什么锁？和事务的隔离级别又有什么关系？</p><p>本节的内容已经够多了，且听下回分解。</p><p><strong>总结</strong></p><p>(1)常见并发控制保证数据一致性的方法有<strong>锁</strong>，<strong>数据多版本</strong>；</p><p>(2)<strong>普通锁</strong><span style="font-size: 14px;letter-spacing: 1px;color: rgb(255, 76, 0);font-family: 宋体;">串行</span>，<strong>读写锁</strong><span style="font-size: 14px;letter-spacing: 1px;color: rgb(255, 76, 0);font-family: 宋体;">读读并行</span>，<strong>数据多版本</strong><span style="font-size: 14px;letter-spacing: 1px;color: rgb(255, 76, 0);font-family: 宋体;">读写并行</span>；</p><p>(3)<strong>redo日志</strong>保证<span style="letter-spacing: 1px;font-size: 14px;font-family: 宋体;">已提交事务的</span>，设计思路是，通过顺序写替代随机写，提高并发；</p><p>(4)<strong>undo日志</strong>用来<span style="font-family: 宋体;font-size: 14px;letter-spacing: 1px;color: rgb(255, 76, 0);">回滚未提交的事务</span>，它存储在回滚段里；</p><p>(5)InnoDB是基于<strong>MVCC</strong>的存储引擎，它利用了存储在回滚段里的undo日志，即数据的旧版本，提高并发；</p><p>(6)InnoDB之所以并发高，<span style="font-family: 宋体;font-size: 14px;letter-spacing: 1px;color: rgb(255, 76, 0);">快照读不加锁</span>；</p><p>(7)InnoDB所有<span style="font-size: 14px;letter-spacing: 1px;color: rgb(255, 76, 0);"><span style="letter-spacing: 1px;font-size: 14px;font-family: 宋体;">普通</span>select<span style="letter-spacing: 1px;font-size: 14px;font-family: 宋体;">都是快照读</span></span>；</p><p><span style="color: rgb(0, 82, 255);"><em><span style="font-size: 14px;letter-spacing: 1px;"><span style="letter-spacing: 1px;font-size: 14px;font-family: 宋体;">画外音：</span><span style="letter-spacing: 1px;font-size: 14px;font-family: 宋体;">本文的知识点均基于</span>MySQL5.6<span style="letter-spacing: 1px;font-size: 14px;font-family: 宋体;">。</span></span></em></span></p><p>希望大家有收获，下一篇继续深入InnoDB的<strong>锁</strong>。</p><p>希望通俗的技术文被更多人看到，求帮<strong>转</strong>。</p><p>相关文章：</p><p>《<a href="http://mp.weixin.qq.com/s?__biz=MjM5ODYxMDA5OQ==&amp;mid=2651961428&amp;idx=1&amp;sn=31a9eb967941d888fbd4bb2112e9602b&amp;chksm=bd2d0d888a5a849e7ebaa7756a8bc1b3d4e2f493f3a76383fc80f7e9ce7657e4ed2f6c01777d&amp;scene=21#wechat_redirect" target="_blank" rel="noopener">InnoDB，5项最佳实践，知其所以然？</a>》</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;此文摘自微信公众号【架构师之路】&lt;/p&gt;
&lt;p&gt;微信扫一扫&lt;br&gt;关注该公众号&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://mp.weixin.qq.com/mp/qrcode?scene=10000004&amp;amp;size=102&amp;amp;__biz=MjM5ODYxMDA5OQ==&amp;amp;mid=2651961431&amp;amp;idx=1&amp;amp;sn=4f46fbada3d99ca6cf74b305d06c1ac6&amp;amp;send_time=&quot; alt=&quot;&quot;&gt;&lt;br&gt;
    
    </summary>
    
      <category term="数据库" scheme="http://yfzhou.coding.me/categories/%E6%95%B0%E6%8D%AE%E5%BA%93/"/>
    
    
      <category term="数据库" scheme="http://yfzhou.coding.me/tags/%E6%95%B0%E6%8D%AE%E5%BA%93/"/>
    
      <category term="SQL" scheme="http://yfzhou.coding.me/tags/SQL/"/>
    
      <category term="InnoDB" scheme="http://yfzhou.coding.me/tags/InnoDB/"/>
    
  </entry>
  
  <entry>
    <title>java8 Lambda表达式</title>
    <link href="http://yfzhou.coding.me/2018/08/13/java8-Lambda%E8%A1%A8%E8%BE%BE%E5%BC%8F/"/>
    <id>http://yfzhou.coding.me/2018/08/13/java8-Lambda表达式/</id>
    <published>2018-08-13T12:10:58.000Z</published>
    <updated>2018-08-13T12:16:45.765Z</updated>
    
    <content type="html"><![CDATA[<p>Java8发布已经有一段时间了，这次发布的改动比较大，很多人将这次改动与Java5的升级相提并论。Java8其中一个很重要的新特性就是lambda表达式，允许我们将行为传到函数中。想想看，在Java8<br>之前我们想要将行为传入函数，仅有的选择就是匿名内部类。Java8发布以后，lambda表达式将大量替代匿名内部类的使用，简化代码的同时，更突出了原来匿名内部类中最重要的那部分包含真正逻辑的代码。尤其是对于做数据的同学来说，当习惯使用类似scala之类的函数式编程语言以后，体会将更加深刻。现在我们就来看看Java8中lambda表达式的一些常见写法。</p><a id="more"></a><h2 id="1-替代匿名内部类"><a href="#1-替代匿名内部类" class="headerlink" title="1.替代匿名内部类"></a>1.替代匿名内部类</h2><p>毫无疑问，lambda表达式用得最多的场合就是替代匿名内部类，而实现Runnable接口是匿名内部类的经典例子。lambda表达式的功能相当强大，用()-&gt;就可以代替整个匿名内部类！请看代码：</p><p>如果使用匿名内部类：<br><figure class="highlight aspectj"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">void</span> <span class="title">oldRunable</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">new</span> Thread(<span class="keyword">new</span> Runnable() &#123;</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="keyword">public</span> <span class="function"><span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            System.out.println(<span class="string">"The old runable now is using!"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;).start();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>而如果使用lambda表达式：<br><figure class="highlight livescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">@Test</span><br><span class="line">public <span class="literal">void</span> runable() &#123;</span><br><span class="line">    <span class="keyword">new</span> Thread<span class="function"><span class="params">(() -&gt; System.out.println(<span class="string">"It's a lambda function!"</span>))</span>.<span class="title">start</span><span class="params">()</span>;</span></span><br><span class="line"><span class="function">&#125;</span></span><br></pre></td></tr></table></figure></p><p>最后的输出：<br><figure class="highlight vbnet"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">The old runable now <span class="keyword">is</span> <span class="keyword">using</span>!</span><br><span class="line">It<span class="comment">'s a lambda function!</span></span><br></pre></td></tr></table></figure></p><p>是不是强大到可怕？是不是简单到可怕？是不是清晰明了重点突出到可怕？这就是lambda表达式的可怕之处，用极少的代码完成了之前一个类做的事情！</p><h2 id="2-使用lambda表达式对集合进行迭代"><a href="#2-使用lambda表达式对集合进行迭代" class="headerlink" title="2.使用lambda表达式对集合进行迭代"></a>2.使用lambda表达式对集合进行迭代</h2><p>Java的集合类是日常开发中经常用到的，甚至说没有哪个java代码中没有使用到集合类。。。而对集合类最常见的操作就是进行迭代遍历了。请看对比：<br><figure class="highlight gradle"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">@Test</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> iterTest() &#123;</span><br><span class="line">    List&lt;String&gt; languages = Arrays.<span class="keyword">asList</span>(<span class="string">"java"</span>,<span class="string">"scala"</span>,<span class="string">"python"</span>);</span><br><span class="line">    <span class="comment">//before java8</span></span><br><span class="line">    <span class="keyword">for</span>(String <span class="keyword">each</span>:languages) &#123;</span><br><span class="line">        System.out.<span class="keyword">println</span>(<span class="keyword">each</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//after java8</span></span><br><span class="line">    languages.forEach(x -&gt; System.out.<span class="keyword">println</span>(x));</span><br><span class="line">    languages.forEach(System.out::<span class="keyword">println</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>如果熟悉scala的同学，肯定对forEach不陌生。它可以迭代集合中所有的对象，并且将lambda表达式带入其中。<br><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">languages</span><span class="selector-class">.forEach</span>(<span class="selector-tag">System</span><span class="selector-class">.out</span><span class="selector-pseudo">::println)</span>;</span><br></pre></td></tr></table></figure></p><p>这一行看起来有点像c++里面作用域解析的写法，在这里也是可以的。</p><h2 id="3-用lambda表达式实现map"><a href="#3-用lambda表达式实现map" class="headerlink" title="3.用lambda表达式实现map"></a>3.用lambda表达式实现map</h2><p>一提到函数式编程，一提到lambda表达式，怎么能不提map。。。没错，java8肯定也是支持的。请看示例代码：<br><figure class="highlight llvm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="title">@Test</span></span><br><span class="line">public void mapTest() &#123;</span><br><span class="line">    List&lt;Double&gt; cost = Arrays.asList(<span class="number">10.0</span>, <span class="number">20.0</span>,<span class="number">30.0</span>)<span class="comment">;</span></span><br><span class="line"><span class="comment">    cost.stream().map(x -&gt; x + x*0.05).forEach(x -&gt; System.out.println(x));</span></span><br><span class="line"><span class="comment">&#125;</span></span><br></pre></td></tr></table></figure></p><p>最后的输出结果：<br><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">10<span class="selector-class">.5</span></span><br><span class="line">21<span class="selector-class">.0</span></span><br><span class="line">31<span class="selector-class">.5</span></span><br></pre></td></tr></table></figure></p><p>map函数可以说是函数式编程里最重要的一个方法了。map的作用是将一个对象变换为另外一个。在我们的例子中，就是通过map方法将cost增加了0,05倍的大小然后输出。</p><h2 id="4-用lambda表达式实现map与reduce"><a href="#4-用lambda表达式实现map与reduce" class="headerlink" title="4.用lambda表达式实现map与reduce"></a>4.用lambda表达式实现map与reduce</h2><p>既然提到了map，又怎能不提到reduce。reduce与map一样，也是函数式编程里最重要的几个方法之一。。。map的作用是将一个对象变为另外一个，而reduce实现的则是将所有值合并为一个，请看：<br><figure class="highlight livescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">@Test</span><br><span class="line">public <span class="literal">void</span> mapReduceTest() &#123;</span><br><span class="line">    List&lt;Double&gt; cost = Arrays.asList(<span class="number">10.0</span>, <span class="number">20.0</span>,<span class="number">30.0</span>);</span><br><span class="line">    double allCost = cost.stream<span class="function"><span class="params">()</span>.<span class="title">map</span><span class="params">(x -&gt; x+x*<span class="number">0.05</span>)</span>.<span class="title">reduce</span><span class="params">((sum,x) -&gt; sum + x)</span>.<span class="title">get</span><span class="params">()</span>;</span></span><br><span class="line"><span class="function">    <span class="title">System</span>.<span class="title">out</span>.<span class="title">println</span><span class="params">(allCost)</span>;</span></span><br><span class="line"><span class="function">&#125;</span></span><br></pre></td></tr></table></figure></p><p>最终的结果为：<br><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">63<span class="selector-class">.0</span></span><br></pre></td></tr></table></figure></p><p>如果我们用for循环来做这件事情：<br><figure class="highlight gradle"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">@Test</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> sumTest() &#123;</span><br><span class="line">    List&lt;<span class="keyword">Double</span>&gt; cost = Arrays.<span class="keyword">asList</span>(<span class="number">10.0</span>, <span class="number">20.0</span>,<span class="number">30.0</span>);</span><br><span class="line">    <span class="keyword">double</span> sum = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">double</span> <span class="keyword">each</span>:cost) &#123;</span><br><span class="line">        <span class="keyword">each</span> += <span class="keyword">each</span> * <span class="number">0.05</span>;</span><br><span class="line">        sum += <span class="keyword">each</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    System.out.<span class="keyword">println</span>(sum);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>相信用map+reduce+lambda表达式的写法高出不止一个level。</p><h2 id="5-filter操作"><a href="#5-filter操作" class="headerlink" title="5.filter操作"></a>5.filter操作</h2><p>filter也是我们经常使用的一个操作。在操作集合的时候，经常需要从原始的集合中过滤掉一部分元素。<br><figure class="highlight gradle"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">@Test</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> filterTest() &#123;</span><br><span class="line">    List&lt;<span class="keyword">Double</span>&gt; cost = Arrays.<span class="keyword">asList</span>(<span class="number">10.0</span>, <span class="number">20.0</span>,<span class="number">30.0</span>,<span class="number">40.0</span>);</span><br><span class="line">    List&lt;<span class="keyword">Double</span>&gt; filteredCost = cost.stream().filter(x -&gt; x &gt; <span class="number">25.0</span>).<span class="keyword">collect</span>(Collectors.<span class="keyword">toList</span>());</span><br><span class="line">    filteredCost.forEach(x -&gt; System.out.<span class="keyword">println</span>(x));</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>最后的结果：<br><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">30<span class="selector-class">.0</span></span><br><span class="line">40<span class="selector-class">.0</span></span><br></pre></td></tr></table></figure></p><p>将java写出了python或者scala的感觉有没有！是不是帅到爆！</p><h2 id="6-与函数式接口Predicate配合"><a href="#6-与函数式接口Predicate配合" class="headerlink" title="6.与函数式接口Predicate配合"></a>6.与函数式接口Predicate配合</h2><p>除了在语言层面支持函数式编程风格，Java 8也添加了一个包，叫做 java.util.function。它包含了很多类，用来支持Java的函数式编程。其中一个便是Predicate，使用 java.util.function.Predicate 函数式接口以及lambda表达式，可以向API方法添加逻辑，用更少的代码支持更多的动态行为。Predicate接口非常适用于做过滤。<br><figure class="highlight processing"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> filterTest(List&lt;<span class="keyword">String</span>&gt; languages, Predicate&lt;<span class="keyword">String</span>&gt; condition) &#123;</span><br><span class="line">    languages.stream().<span class="built_in">filter</span>(x -&gt; condition.test(x)).forEach(x -&gt; System.out.<span class="built_in">println</span>(x + <span class="string">" "</span>));</span><br><span class="line">&#125;</span><br><span class="line">    </span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> main(<span class="keyword">String</span>[] args) &#123;</span><br><span class="line">    List&lt;<span class="keyword">String</span>&gt; languages = Arrays.asList(<span class="string">"Java"</span>,<span class="string">"Python"</span>,<span class="string">"scala"</span>,<span class="string">"Shell"</span>,<span class="string">"R"</span>);</span><br><span class="line">    System.out.<span class="built_in">println</span>(<span class="string">"Language starts with J: "</span>);</span><br><span class="line">    filterTest(languages,x -&gt; x.startsWith(<span class="string">"J"</span>));</span><br><span class="line">    System.out.<span class="built_in">println</span>(<span class="string">"\nLanguage ends with a: "</span>);</span><br><span class="line">    filterTest(languages,x -&gt; x.endsWith(<span class="string">"a"</span>));</span><br><span class="line">    System.out.<span class="built_in">println</span>(<span class="string">"\nAll languages: "</span>);</span><br><span class="line">    filterTest(languages,x -&gt; <span class="keyword">true</span>);</span><br><span class="line">    System.out.<span class="built_in">println</span>(<span class="string">"\nNo languages: "</span>);</span><br><span class="line">    filterTest(languages,x -&gt; <span class="keyword">false</span>);</span><br><span class="line">    System.out.<span class="built_in">println</span>(<span class="string">"\nLanguage length bigger three: "</span>);</span><br><span class="line">    filterTest(languages,x -&gt; x.length() &gt; <span class="number">4</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>最后的输出结果：</p><pre><code>Language starts with J: Java Language ends with a: Java scala All languages: Java Python scala Shell R No languages: Language length bigger three: Python scala Shell </code></pre><p>可以看到，Stream API的过滤方法也接受一个Predicate，这意味着可以将我们定制的 filter() 方法替换成写在里面的内联代码，这也是lambda表达式的魔力！</p><h2 id="参考文档："><a href="#参考文档：" class="headerlink" title="参考文档："></a>参考文档：</h2><p>1.<a href="http://www.importnew.com/16436.html" target="_blank" rel="noopener">《Java8 lambda表达式10个示例》</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Java8发布已经有一段时间了，这次发布的改动比较大，很多人将这次改动与Java5的升级相提并论。Java8其中一个很重要的新特性就是lambda表达式，允许我们将行为传到函数中。想想看，在Java8&lt;br&gt;之前我们想要将行为传入函数，仅有的选择就是匿名内部类。Java8发布以后，lambda表达式将大量替代匿名内部类的使用，简化代码的同时，更突出了原来匿名内部类中最重要的那部分包含真正逻辑的代码。尤其是对于做数据的同学来说，当习惯使用类似scala之类的函数式编程语言以后，体会将更加深刻。现在我们就来看看Java8中lambda表达式的一些常见写法。&lt;/p&gt;
    
    </summary>
    
      <category term="Java" scheme="http://yfzhou.coding.me/categories/Java/"/>
    
    
      <category term="Java" scheme="http://yfzhou.coding.me/tags/Java/"/>
    
      <category term="Lambda" scheme="http://yfzhou.coding.me/tags/Lambda/"/>
    
  </entry>
  
  <entry>
    <title>Hexo-Next搭建个人博客（添加网页标题崩溃欺骗搞怪特效）</title>
    <link href="http://yfzhou.coding.me/2018/08/13/Hexo-Next%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2%EF%BC%88%E6%B7%BB%E5%8A%A0%E7%BD%91%E9%A1%B5%E6%A0%87%E9%A2%98%E5%B4%A9%E6%BA%83%E6%AC%BA%E9%AA%97%E6%90%9E%E6%80%AA%E7%89%B9%E6%95%88%EF%BC%89/"/>
    <id>http://yfzhou.coding.me/2018/08/13/Hexo-Next搭建个人博客（添加网页标题崩溃欺骗搞怪特效）/</id>
    <published>2018-08-13T11:21:24.000Z</published>
    <updated>2018-08-13T11:25:17.715Z</updated>
    
    <content type="html"><![CDATA[<p>给网页title添加一些搞怪特效  </p><a id="more"></a><h1 id="crash-cheat-js"><a href="#crash-cheat-js" class="headerlink" title="crash_cheat.js"></a><a href="#crash-cheat-js" title="crash_cheat.js"></a>crash_cheat.js</h1><p>在<code>next\source\js\src</code>文件夹下创建<code>crash_cheat.js</code>，添加代码：  </p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">&lt;!--崩溃欺骗--&gt;</span><br><span class="line"><span class="keyword">var</span> OriginTitle = <span class="built_in">document</span>.title;</span><br><span class="line"><span class="keyword">var</span> titleTime;</span><br><span class="line"><span class="built_in">document</span>.addEventListener(<span class="string">'visibilitychange'</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">document</span>.hidden) &#123;</span><br><span class="line">        $(<span class="string">'[rel="icon"]'</span>).attr(<span class="string">'href'</span>, <span class="string">"/img/TEP.ico"</span>);</span><br><span class="line">        <span class="built_in">document</span>.title = <span class="string">'╭(°A°`)╮ 页面崩溃啦 ~'</span>;</span><br><span class="line">        clearTimeout(titleTime);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> &#123;</span><br><span class="line">        $(<span class="string">'[rel="icon"]'</span>).attr(<span class="string">'href'</span>, <span class="string">"/favicon.ico"</span>);</span><br><span class="line">        <span class="built_in">document</span>.title = <span class="string">'(ฅ&gt;ω&lt;*ฅ) 噫又好了~'</span> + OriginTitle;</span><br><span class="line">        titleTime = setTimeout(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">            <span class="built_in">document</span>.title = OriginTitle;</span><br><span class="line">        &#125;, <span class="number">2000</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h1 id="引用"><a href="#引用" class="headerlink" title="引用"></a><a href="#引用" title="引用"></a>引用</h1><p>在<code>next\layout\_layout.swig</code>文件中，添加引用（注：在swig末尾添加）：  </p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--崩溃欺骗--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span> <span class="attr">src</span>=<span class="string">"/js/src/crash_cheat.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;给网页title添加一些搞怪特效  &lt;/p&gt;
    
    </summary>
    
      <category term="Hexo" scheme="http://yfzhou.coding.me/categories/Hexo/"/>
    
    
      <category term="Hexo" scheme="http://yfzhou.coding.me/tags/Hexo/"/>
    
      <category term="Next" scheme="http://yfzhou.coding.me/tags/Next/"/>
    
  </entry>
  
  <entry>
    <title>前端杂记</title>
    <link href="http://yfzhou.coding.me/2018/08/13/%E5%89%8D%E7%AB%AF%E6%9D%82%E8%AE%B0/"/>
    <id>http://yfzhou.coding.me/2018/08/13/前端杂记/</id>
    <published>2018-08-13T02:39:15.000Z</published>
    <updated>2018-08-13T03:05:06.688Z</updated>
    
    <content type="html"><![CDATA[<p>记录工作中遇到的一些关于前端的破事。</p><a id="more"></a><ol><li><p>正则验证</p><figure class="highlight xquery"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> regIdNo = /(^\d&#123;<span class="number">15</span>&#125;$)|(^\d&#123;<span class="number">18</span>&#125;$)|(^\d&#123;<span class="number">17</span>&#125;(\d|X|x)$)/; </span><br><span class="line"><span class="keyword">let</span> regtel=/^[<span class="number">1</span>][<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">7</span>,<span class="number">8</span>][<span class="number">0</span>-<span class="number">9</span>]&#123;<span class="number">9</span>&#125;$/;</span><br><span class="line"><span class="keyword">let</span> reglicence = /^[京津沪渝冀豫云辽黑湘皖鲁新苏浙赣鄂桂甘晋蒙陕吉闽贵粤青藏川宁琼使领A-Z]&#123;<span class="number">1</span>&#125;[A-Z]&#123;<span class="number">1</span>&#125;[A-Z<span class="number">0</span>-<span class="number">9</span>]&#123;<span class="number">4</span>&#125;[A-Z<span class="number">0</span>-<span class="number">9</span>挂学警港澳]&#123;<span class="number">1</span>&#125;$/;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (!regtel.test(<span class="string">'##############'</span>)) &#123;</span><br><span class="line">    alert(<span class="string">'手机号格式有误'</span>)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(!regIdNo.test(<span class="string">'##############'</span>))&#123;  </span><br><span class="line"> alert(<span class="string">'身份证号填写有误'</span>)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(!reglicence.test(<span class="string">'##########'</span>))&#123;</span><br><span class="line">alert(<span class="string">'身份证号填写有误'</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>集合快速去除（ES6）</p><figure class="highlight haxe"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">Array</span>.from(<span class="keyword">new</span> <span class="type">Set</span>(a))</span><br></pre></td></tr></table></figure></li><li></li></ol>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;记录工作中遇到的一些关于前端的破事。&lt;/p&gt;
    
    </summary>
    
      <category term="前端" scheme="http://yfzhou.coding.me/categories/%E5%89%8D%E7%AB%AF/"/>
    
    
      <category term="HTML" scheme="http://yfzhou.coding.me/tags/HTML/"/>
    
      <category term="前端" scheme="http://yfzhou.coding.me/tags/%E5%89%8D%E7%AB%AF/"/>
    
      <category term="css" scheme="http://yfzhou.coding.me/tags/css/"/>
    
      <category term="js" scheme="http://yfzhou.coding.me/tags/js/"/>
    
  </entry>
  
  <entry>
    <title>HTML5 file API加canvas实现图片前端JS压缩并上传</title>
    <link href="http://yfzhou.coding.me/2018/08/10/HTML5%20file%20API%E5%8A%A0canvas%E5%AE%9E%E7%8E%B0%E5%9B%BE%E7%89%87%E5%89%8D%E7%AB%AFJS%E5%8E%8B%E7%BC%A9%E5%B9%B6%E4%B8%8A%E4%BC%A0/"/>
    <id>http://yfzhou.coding.me/2018/08/10/HTML5 file API加canvas实现图片前端JS压缩并上传/</id>
    <published>2018-08-10T11:26:16.000Z</published>
    <updated>2018-08-13T03:08:14.205Z</updated>
    
    <content type="html"><![CDATA[<p>by <a href="http://www.zhangxinxu.com/" target="_blank" rel="noopener">zhangxinxu</a> from <a href="http://www.zhangxinxu.com/wordpress/?p=6308" target="_blank" rel="noopener">http://www.zhangxinxu.com/wordpress/?p=6308</a><br>本文可全文转载，但需得到原作者书面许可，同时保留原作者和出处，摘要引流则随意。</p><a id="more"></a><h3 id="一、图片上传前端压缩的现实意义"><a href="#一、图片上传前端压缩的现实意义" class="headerlink" title="一、图片上传前端压缩的现实意义"></a>一、图片上传前端压缩的现实意义</h3><p>对于大尺寸图片的上传，在前端进行压缩除了省流量外，最大的意义是极大的提高了用户体验。</p><p>这种体验包括两方面：</p><ol><li>由于上传图片尺寸比较小，因此上传速度会比较快，交互会更加流畅，同时大大降低了网络异常导致上传失败风险。</li><li>最最重要的体验改进点：省略了图片的再加工成本。很多网站的图片上传功能都会对图片的大小进行限制，尤其是头像上传，限制5M或者2M以内是非常常见的。然后现在的数码设备拍摄功能都非常出众，一张原始图片超过2M几乎是标配，此时如果用户想把手机或相机中的某个得意图片上传作为自己的头像，就会遇到因为图片大小限制而不能上传的窘境，不得不对图片进行再处理，而这种体验其实非常不好的。如果可以在前端进行压缩，则理论上对图片尺寸的限制是没有必要的。</li></ol><h3 id="二、图片前端JS压缩并上传功能体验"><a href="#二、图片前端JS压缩并上传功能体验" class="headerlink" title="二、图片前端JS压缩并上传功能体验"></a>二、图片前端JS压缩并上传功能体验</h3><p>特意制作了一个图片前端压缩并上传的完整demo，您可以狠狠的点击这里：<a href="http://www.zhangxinxu.com/study/201707/js-compress-image-before-upload.html" target="_blank" rel="noopener">使用canvas在前端压缩图片并上传demo</a></p><p>进入demo会看到一个相貌平平的文件输入框：</p><p><img src="//image.zhangxinxu.com/image/blog/201707/gutianlle.jpg" alt="相貌平平"></p><p>啊，不对，应该是这张图：</p><p><img src="//image.zhangxinxu.com/image/blog/201707/2017-07-30_221637.png" alt="相貌平平文件选择框"></p><p>点击文件选择框，我们不妨选一张尺寸比较大的图片，例如下面这种2M多的钓鱼收获照：</p><p><img src="//image.zhangxinxu.com/image/blog/201707/2017-07-30_221955.png" alt="上传演示使用的图片"></p><p>于是图片歘歘歘地传上去了：<br><img src="//image.zhangxinxu.com/image/blog/201707/2017-07-30_222424.png" alt="上传相关信息截图"></p><p>此时我们点击最终上传完毕的图片地址，会发现原来2M多3000多像素宽的图片被限制为400像素宽了：<br><img src="//image.zhangxinxu.com/image/blog/201707/2017-07-30_222714s.jpg" alt="图片缩小后在浏览器中的预览效果图"></p><p>保存到本地会发现图片尺寸已经变成只有70K了：<br><img src="//image.zhangxinxu.com/image/blog/201707/2017-07-30_223016.jpg" alt="保存到本地显示的图片尺寸"></p><p>以上就是图片前端压缩并上传demo的完整演示。</p><h3 id="三、HTML5-file-API加canvas实现图片前端JS压缩"><a href="#三、HTML5-file-API加canvas实现图片前端JS压缩" class="headerlink" title="三、HTML5 file API加canvas实现图片前端JS压缩"></a>三、HTML5 file API加canvas实现图片前端JS压缩</h3><p>要想使用JS实现图片的压缩效果，原理其实很简单，核心API就是使用<code>canvas</code>的<code>drawImage()</code>方法。</p><p><code>canvas</code>的<code>drawImage()</code>方法API如下：</p><figure class="highlight mipsasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">context</span>.drawImage(img, dx, dy)<span class="comment">;</span></span><br><span class="line"><span class="built_in">context</span>.drawImage(img, dx, dy, dWidth, dHeight)<span class="comment">;</span></span><br><span class="line"><span class="built_in">context</span>.drawImage(img, sx, sy, <span class="keyword">sWidth, </span><span class="keyword">sHeight, </span>dx, dy, dWidth, dHeight)<span class="comment">;</span></span><br></pre></td></tr></table></figure><p>后面最复杂的语法虽然看上去有9大参数，但不用慌，实际上可以看出就3个参数：</p><p><strong>img</strong></p><p>就是图片对象，可以是页面上获取的DOM对象，也可以是虚拟DOM中的图片对象。</p><p><strong>dx, dy, dWidth, dHeight</strong></p><p>表示在<code>canvas</code>画布上规划处一片区域用来放置图片，<code>dx, dy</code>为canvas元素的左上角坐标，<code>dWidth, dHeight</code>指canvas元素上用在显示图片的区域大小。如果没有指定<code>sx,sy,sWidth,sHeight</code>这4个参数，则图片会被拉伸或缩放在这片区域内。</p><p><strong>sx,sy,swidth,sheight</strong></p><p>这4个坐标是针对图片元素的，表示图片在<code>canvas</code>画布上显示的大小和位置。<code>sx,sy</code>表示图片上<code>sx,sy</code>这个坐标作为左上角，然后往右下角的<code>swidth,sheight</code>尺寸范围图片作为最终在canvas上显示的图片内容。</p><p><code>drawImage()</code>方法有一个非常怪异的地方，大家一定要注意，那就是5参数和9参数里面参数位置是不一样的，这个和一般的API有所不同。一般API可选参数是放在后面。但是，这里的<code>drawImage()</code>9个参数时候，可选参数<code>sx,sy,swidth,sheight</code>是在前面的。如果不注意这一点，有些表现会让你无法理解。</p><p>下图为<a href="https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D/drawImage" target="_blank" rel="noopener">MDN</a>上原理示意：<br><img src="//image.zhangxinxu.com/image/blog/201711/Canvas_drawimage.jpg" alt="Canvas drawimage()原理示意"></p><p>对于本文的图片压缩，需要用的是是5个参数语法。举个例子，一张图片（假设图片对象是<code>img</code>）的原始尺寸是4000*3000，现在需要把尺寸限制为400*300大小，很简单，原理如下代码示意：<br><figure class="highlight lsl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">var canvas = document.createElement('canvas');</span><br><span class="line">var context = canvas.getContext('<span class="number">2</span>d');</span><br><span class="line">canvas.width = <span class="number">400</span>;</span><br><span class="line">canvas.height = <span class="number">300</span>;</span><br><span class="line"><span class="comment">// 核心JS就这个</span></span><br><span class="line">context.drawImage(img,<span class="number">0</span>,<span class="number">0</span>,<span class="number">400</span>,<span class="number">300</span>);</span><br></pre></td></tr></table></figure></p><p>把一张大的图片，直接画在一张小小的画布上。此时大图片就天然变成了小图片，压缩就这么实现了，是不是简单的有点超乎想象。</p><p>当然，若要落地于实际开发，我们还需要做些其他的工作，就是要解决图片来源和图片去向的问题。</p><h4 id="1-如何把系统中图片呈现在浏览器中？"><a href="#1-如何把系统中图片呈现在浏览器中？" class="headerlink" title="1. 如何把系统中图片呈现在浏览器中？"></a>1. 如何把系统中图片呈现在浏览器中？</h4><p>HTML5 file API可以让图片在上传之前直接在浏览器中显示，通常使用<code>FileReader</code>方法，代码示意如下：<br><figure class="highlight actionscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> reader = <span class="keyword">new</span> FileReader(), img = <span class="keyword">new</span> Image();</span><br><span class="line"><span class="comment">// 读文件成功的回调</span></span><br><span class="line">reader.onload = <span class="function"><span class="keyword">function</span><span class="params">(e)</span> </span>&#123;</span><br><span class="line">  <span class="comment">// e.target.result就是图片的base64地址信息</span></span><br><span class="line">  img.src = e.target.result;</span><br><span class="line">&#125;;</span><br><span class="line">eleFile.addEventListener(<span class="string">'change'</span>, <span class="function"><span class="keyword">function</span> <span class="params">(event)</span> </span>&#123;</span><br><span class="line">    reader.readAsDataURL(event.target.files\[<span class="number">0</span>\]);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></p><p>于是，包含图片信息的<code>context.drawImage()</code>方法中的<code>img</code>图片就有了。</p><p><strong>2. 如果把canvas画布转换成img图像</strong><br><code>canvas</code>天然提供了2个转图片的方法，一个是：</p><p><strong>canvas.toDataURL()方法</strong></p><p>语法如下：<br><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">canvas</span>.toDataURL(mimeType, qualityArgument)</span><br></pre></td></tr></table></figure></p><p>可以把图片转换成base64格式信息，纯字符的图片表示法。</p><p>其中：<br><code>mimeType</code>表示<code>canvas</code>导出来的<code>base64</code>图片的类型，默认是png格式，也即是默认值是<code>&#39;image/png&#39;</code>，我们也可以指定为jpg格式<code>&#39;image/jpeg&#39;</code>或者webp等格式。<code>file</code>对象中的<code>file.type</code>就是文件的mimeType类型，在转换时候正好可以直接拿来用（如果有file对象）。<br><code>qualityArgument</code>表示导出的图片质量，只要导出为<code>jpg</code>和<code>webp</code>格式的时候此参数才有效果，默认值是<code>0.92</code>，是一个比较合理的图片质量输出参数，通常情况下，我们无需再设定。</p><p><strong>canvas.toBlob()方法</strong></p><p><a href="https://developer.mozilla.org/en-US/docs/Web/API/HTMLCanvasElement/toBlob" target="_blank" rel="noopener">语法</a>如下：</p><p>canvas.toBlob(callback, mimeType, qualityArgument)</p><p>可以把canvas转换成<a href="http://www.zhangxinxu.com/wordpress/2013/10/understand-domstring-document-formdata-blob-file-arraybuffer/" target="_blank" rel="noopener">Blob文件</a>，通常用在文件上传中，因为是二进制的，对后端更加友好。</p><p>和<code>toDataURL()</code>方法相比，<code>toBlob()</code>方法是异步的，因此多了个<code>callback</code>参数，这个<code>callback</code>回调方法默认的第一个参数就是转换好的<code>blob</code>文件信息，本文demo的文件上传就是将<code>canvas</code>图片转换成二进制的<code>blob</code>文件，然后再<code>ajax</code>上传的，代码如下：<br><figure class="highlight accesslog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">// canvas转为blob并上传</span><br><span class="line">canvas.toBlob(function (blob) &#123;</span><br><span class="line">  // 图片ajax上传</span><br><span class="line">  var xhr = new XMLHttpRequest();</span><br><span class="line">  // 开始上传</span><br><span class="line">  xhr.open(<span class="string">"<span class="keyword">POST</span>"</span>, 'upload.php', true);</span><br><span class="line">  xhr.send(blob);    </span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></p><p>于是，经过“图片→canvas压缩→图片”三步曲，我们完成了图片前端压缩并上传的功能。</p><p>更加完整的核心代码请参见<a href="http://www.zhangxinxu.com/study/201707/js-compress-image-before-upload.html" target="_blank" rel="noopener">demo页面</a>的左侧，如果对其他交互代码也敢兴趣，请参考页面源代码。</p><p>下面贴出完整代码：</p><p><strong>HTML代码：</strong><br><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;input <span class="attribute">id</span>=<span class="string">"file"</span> <span class="attribute">type</span>=<span class="string">"file"</span>&gt;</span><br></pre></td></tr></table></figure></p><p><strong>JS代码：</strong><br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> eleFile = <span class="built_in">document</span>.querySelector(<span class="string">'#file'</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 压缩图片需要的一些元素和对象</span></span><br><span class="line"><span class="keyword">var</span> reader = <span class="keyword">new</span> FileReader(), img = <span class="keyword">new</span> Image();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 选择的文件对象</span></span><br><span class="line"><span class="keyword">var</span> file = <span class="literal">null</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 缩放图片需要的canvas</span></span><br><span class="line"><span class="keyword">var</span> canvas = <span class="built_in">document</span>.createElement(<span class="string">'canvas'</span>);</span><br><span class="line"><span class="keyword">var</span> context = canvas.getContext(<span class="string">'2d'</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// base64地址图片加载完毕后</span></span><br><span class="line">img.onload = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="comment">// 图片原始尺寸</span></span><br><span class="line">    <span class="keyword">var</span> originWidth = <span class="keyword">this</span>.width;</span><br><span class="line">    <span class="keyword">var</span> originHeight = <span class="keyword">this</span>.height;</span><br><span class="line">    <span class="comment">// 最大尺寸限制</span></span><br><span class="line">    <span class="keyword">var</span> maxWidth = <span class="number">400</span>, maxHeight = <span class="number">400</span>;</span><br><span class="line">    <span class="comment">// 目标尺寸</span></span><br><span class="line">    <span class="keyword">var</span> targetWidth = originWidth, targetHeight = originHeight;</span><br><span class="line">    <span class="comment">// 图片尺寸超过400x400的限制</span></span><br><span class="line">    <span class="keyword">if</span> (originWidth &gt; maxWidth || originHeight &gt; maxHeight) &#123;</span><br><span class="line">        <span class="keyword">if</span> (originWidth / originHeight &gt; maxWidth / maxHeight) &#123;</span><br><span class="line">            <span class="comment">// 更宽，按照宽度限定尺寸</span></span><br><span class="line">            targetWidth = maxWidth;</span><br><span class="line">            targetHeight = <span class="built_in">Math</span>.round(maxWidth * (originHeight / originWidth));</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            targetHeight = maxHeight;</span><br><span class="line">            targetWidth = <span class="built_in">Math</span>.round(maxHeight * (originWidth / originHeight));</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">        </span><br><span class="line">    <span class="comment">// canvas对图片进行缩放</span></span><br><span class="line">    canvas.width = targetWidth;</span><br><span class="line">    canvas.height = targetHeight;</span><br><span class="line">    <span class="comment">// 清除画布</span></span><br><span class="line">    context.clearRect(<span class="number">0</span>, <span class="number">0</span>, targetWidth, targetHeight);</span><br><span class="line">    <span class="comment">// 图片压缩</span></span><br><span class="line">    context.drawImage(img, <span class="number">0</span>, <span class="number">0</span>, targetWidth, targetHeight);</span><br><span class="line">    <span class="comment">// canvas转为blob并上传</span></span><br><span class="line">    canvas.toBlob(<span class="function"><span class="keyword">function</span> (<span class="params">blob</span>) </span>&#123;</span><br><span class="line">        <span class="comment">// 图片ajax上传</span></span><br><span class="line">        <span class="keyword">var</span> xhr = <span class="keyword">new</span> XMLHttpRequest();</span><br><span class="line">        <span class="comment">// 文件上传成功</span></span><br><span class="line">        xhr.onreadystatechange = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">            <span class="keyword">if</span> (xhr.status == <span class="number">200</span>) &#123;</span><br><span class="line">                <span class="comment">// xhr.responseText就是返回的数据</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;;</span><br><span class="line">        <span class="comment">// 开始上传</span></span><br><span class="line">        xhr.open(<span class="string">"POST"</span>, <span class="string">'upload.php'</span>, <span class="literal">true</span>);</span><br><span class="line">        xhr.send(blob);    </span><br><span class="line">    &#125;, file.type || <span class="string">'image/png'</span>);</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 文件base64化，以便获知图片原始尺寸</span></span><br><span class="line">reader.onload = <span class="function"><span class="keyword">function</span>(<span class="params">e</span>) </span>&#123;</span><br><span class="line">    img.src = e.target.result;</span><br><span class="line">&#125;;</span><br><span class="line">eleFile.addEventListener(<span class="string">'change'</span>, <span class="function"><span class="keyword">function</span> (<span class="params">event</span>) </span>&#123;</span><br><span class="line">    file = event.target.files[<span class="number">0</span>];</span><br><span class="line">    <span class="comment">// 选择的文件是图片</span></span><br><span class="line">    <span class="keyword">if</span> (file.type.indexOf(<span class="string">"image"</span>) == <span class="number">0</span>) &#123;</span><br><span class="line">        reader.readAsDataURL(file);    </span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></p><h3 id="四、结束语"><a href="#四、结束语" class="headerlink" title="四、结束语"></a>四、结束语</h3><p>就在几个月前刚写过一篇文章“<a href="http://www.zhangxinxu.com/wordpress/?p=6165" target="_blank" rel="noopener">使用canvas在前端实现图片水印合成</a>”，实际上所使用的技术和套路和本文是如出一辙的，也是“图片→canvas水印→图片”三步曲，区别在于水印合成是连续执行两次<code>context.drawImage()</code>方法，一次是原图一次水印图片，以及最后转换成图片的时候什么是<code>toDataURL()</code>方法，其他代码逻辑和原理都是一样的。</p><p>由此及彼，利用同样的原理和代码逻辑，我们还可以实现其它很多以前前端不太好实现的功能，比方说图片的真剪裁效果，所谓“真剪裁”指不是使用个<code>overflow:hidden</code>或者<code>clip</code>这些CSS属性的“伪剪裁”，而是真正意义上就这么大区域图片信息。甚至配合一些前端算法，我们可以直接在前端进行人脸识别，图片自动美化等一系列功能再上传等等。</p><p>原理都是一样的，都是利用<code>canvas</code>作为中间媒介进行处理。</p><p>好，以上就是本文的全部内容，感谢阅读，欢迎纠错，欢迎交流！</p><p><img src="//image.zhangxinxu.com/image/blog/201611/14.png" alt=""></p><p>本文为原创文章，会经常更新知识点以及修正一些错误，因此转载请保留原出处，方便溯源，避免陈旧错误知识的误导，同时有更好的阅读体验。<br>本文地址：<a href="http://www.zhangxinxu.com/wordpress/?p=6308" target="_blank" rel="noopener">http://www.zhangxinxu.com/wordpress/?p=6308</a></p><p>相关文章</p><ul><li><a href="https://www.zhangxinxu.com/wordpress/2013/11/xmlhttprequest-ajax-localstorage-%e6%96%87%e4%bb%b6%e6%96%ad%e7%82%b9%e7%bb%ad%e4%bc%a0/" target="_blank" rel="noopener">XMLHttpRequest实现HTTP协议下文件上传断点续传</a></li><li><a href="https://www.zhangxinxu.com/wordpress/2015/11/html-input-type-file/" target="_blank" rel="noopener">HTML input type=file文件选择表单元素二三事</a></li><li><a href="https://www.zhangxinxu.com/wordpress/2018/05/js-custom-gif-generate/" target="_blank" rel="noopener">纯前端实现可传图可字幕台词定制的GIF表情生成器</a></li><li><a href="https://www.zhangxinxu.com/wordpress/2018/03/js-parse-text-file/" target="_blank" rel="noopener">小tips: 纯前端JS读取与解析本地文本类文件</a></li><li><a href="https://www.zhangxinxu.com/wordpress/2009/11/ajax-upload%e5%a4%9a%e6%96%87%e4%bb%b6%e4%b8%8a%e4%bc%a0%e6%8f%92%e4%bb%b6%e7%bf%bb%e8%af%91%e5%8f%8a%e4%b8%ad%e6%96%87%e6%bc%94%e7%a4%ba/" target="_blank" rel="noopener">Ajax Upload多文件上传插件翻译及中文演示</a></li><li><a href="https://www.zhangxinxu.com/wordpress/2013/10/understand-domstring-document-formdata-blob-file-arraybuffer/" target="_blank" rel="noopener">理解DOMString、Document、FormData、Blob、File、ArrayBuffer数据类型</a></li><li><a href="https://www.zhangxinxu.com/wordpress/2011/09/%e5%9f%ba%e4%ba%8ehtml5%e7%9a%84%e5%8f%af%e9%a2%84%e8%a7%88%e5%a4%9a%e5%9b%be%e7%89%87ajax%e4%b8%8a%e4%bc%a0/" target="_blank" rel="noopener">基于HTML5的可预览多图片Ajax上传</a></li><li><a href="https://www.zhangxinxu.com/wordpress/2017/05/canvas-picture-watermark-synthesis/" target="_blank" rel="noopener">小tips:使用canvas在前端实现图片水印合成</a></li><li><a href="https://www.zhangxinxu.com/wordpress/2018/08/js-base64-atob-btoa-encode-decode/" target="_blank" rel="noopener">原来浏览器原生支持JS Base64编码解码</a></li><li><a href="https://www.zhangxinxu.com/wordpress/2017/07/js-text-string-download-as-html-json-file/" target="_blank" rel="noopener">小tip:JS前端创建html或json文件并浏览器导出下载</a></li><li><a href="https://www.zhangxinxu.com/wordpress/2017/08/svg-foreignobject/" target="_blank" rel="noopener">SVG <foreignobject>简介与截图等应用</foreignobject></a></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;by &lt;a href=&quot;http://www.zhangxinxu.com/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;zhangxinxu&lt;/a&gt; from &lt;a href=&quot;http://www.zhangxinxu.com/wordpress/?p=6308&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;http://www.zhangxinxu.com/wordpress/?p=6308&lt;/a&gt;&lt;br&gt;本文可全文转载，但需得到原作者书面许可，同时保留原作者和出处，摘要引流则随意。&lt;/p&gt;
    
    </summary>
    
      <category term="前端" scheme="http://yfzhou.coding.me/categories/%E5%89%8D%E7%AB%AF/"/>
    
    
      <category term="HTML" scheme="http://yfzhou.coding.me/tags/HTML/"/>
    
      <category term="file" scheme="http://yfzhou.coding.me/tags/file/"/>
    
      <category term="canvas" scheme="http://yfzhou.coding.me/tags/canvas/"/>
    
  </entry>
  
  <entry>
    <title>在HTML在线预览PDF、word、xls、ppt等文件</title>
    <link href="http://yfzhou.coding.me/2018/08/09/%E5%9C%A8HTML%E5%9C%A8%E7%BA%BF%E9%A2%84%E8%A7%88PDF%E3%80%81word%E3%80%81xls%E3%80%81ppt%E7%AD%89%E6%96%87%E4%BB%B6/"/>
    <id>http://yfzhou.coding.me/2018/08/09/在HTML在线预览PDF、word、xls、ppt等文件/</id>
    <published>2018-08-09T11:04:48.000Z</published>
    <updated>2018-08-15T01:17:52.322Z</updated>
    
    <content type="html"><![CDATA[<p>最近应工作需求html预览pdf和word，一些所涉功能知识记录一下,其他教程写得太老了，可能到如今已经不再适用。</p><a id="more"></a><h2 id="html实现pdf文件在线预览功能"><a href="#html实现pdf文件在线预览功能" class="headerlink" title="html实现pdf文件在线预览功能"></a>html实现pdf文件在线预览功能</h2><h3 id="方式一、-lt-a-gt-标签"><a href="#方式一、-lt-a-gt-标签" class="headerlink" title="方式一、&lt;a&gt;标签"></a>方式一、<code>&lt;a&gt;</code>标签</h3><p>pdf文件理论上可以在浏览器直接打开预览但是需要打开新页面。在仅仅是预览pdf文件且UI要求不高的情况下可以直接通过a标签href属性实现预览<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"文档地址"</span>&gt;</span>预览pdf<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br></pre></td></tr></table></figure></p><h3 id="方式二、jquery-media-js"><a href="#方式二、jquery-media-js" class="headerlink" title="方式二、jquery.media.js"></a>方式二、jquery.media.js</h3><p>通过jquery插件<a href="https://link.jianshu.com?t=https%3A%2F%2Fgithub.com%2Fmalsup%2Fmedia%2Fblob%2Fmaster%2Fjquery.media.js" target="_blank" rel="noopener">jquery.media.js</a>实现</p><p>这个插件可以实现pdf预览功能（包括其他各种<a href="https://link.jianshu.com?t=http%3A%2F%2Fwww.jb51.net%2Farticle%2F58724.htm" target="_blank" rel="noopener">媒体文件</a>）但是对word等类型的文件无能为力。</p><p>实现方式：</p><p>js代码：<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">”text/javascript”</span> <span class="attr">src</span>=<span class="string">”jquery-1.7.1.min.js”</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">”text/javascript”</span> <span class="attr">src</span>=<span class="string">”jquery.media.js”</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure></p><p>html结构：<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"handout_wrap_inner"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure></p><p>调用方式：<br><figure class="highlight processing"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">$(<span class="string">'#handout_wrap_inner'</span>).media(&#123;</span><br><span class="line">  <span class="built_in">width</span>: <span class="string">'100%'</span>,</span><br><span class="line">  <span class="built_in">height</span>: <span class="string">'100%'</span>,</span><br><span class="line">  autoplay: <span class="keyword">true</span>,</span><br><span class="line">  src:<span class="string">'http://storage.xuetangx.com/public_assets/xuetangx/PDF/PlayerAPI_v1.0.6.pdf'</span>,</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></p><h3 id="方式三、-lt-iframe-gt-标签"><a href="#方式三、-lt-iframe-gt-标签" class="headerlink" title="方式三、&lt;iframe&gt;标签"></a>方式三、<code>&lt;iframe&gt;</code>标签</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$("<span class="tag">&lt;<span class="name">iframe</span> <span class="attr">src</span>=<span class="string">'previewUrl'</span> <span class="attr">width</span>=<span class="string">'100%'</span> <span class="attr">height</span>=<span class="string">'100%'</span>&gt;</span><span class="tag">&lt;/<span class="name">iframe</span>&gt;</span>").append($('body'))</span><br></pre></td></tr></table></figure><p>此外还可以在<code>iframe</code>标签之间提供一个提示类似这样<br><figure class="highlight livecodeserver"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;iframe src=<span class="string">"previewUrl"</span> width=<span class="string">"100%"</span> height=<span class="string">"100%"</span>&gt;</span><br><span class="line">  This browser does <span class="keyword">not</span> support PDFs. </span><br><span class="line">  Please download <span class="keyword">the</span> PDF <span class="built_in">to</span> view <span class="keyword">it</span>: </span><br><span class="line">  &lt;<span class="keyword">a</span> href=<span class="string">"previewUrl"</span>&gt;Download PDF&lt;/<span class="keyword">a</span>&gt;</span><br><span class="line">&lt;/iframe&gt;</span><br></pre></td></tr></table></figure></p><h3 id="方式四、-lt-embed-gt-标签"><a href="#方式四、-lt-embed-gt-标签" class="headerlink" title="方式四、&lt;embed&gt;标签"></a>方式四、<code>&lt;embed&gt;</code>标签</h3><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;embed <span class="attribute">src</span>=<span class="string">"previewUrl"</span> <span class="attribute">type</span>=<span class="string">"application/pdf"</span> <span class="attribute">width</span>=<span class="string">"100%"</span> <span class="attribute">height</span>=<span class="string">"100%"</span>&gt;</span><br></pre></td></tr></table></figure><p>此标签h5特性中包含四个属性：高、宽、类型、预览文件src！<br>与<code>&lt;iframe&gt;&lt;/iframe&gt;</code>不同，这个标签是自闭合的的，也就是说如果浏览器不支持PDF的嵌入，那么这个标签的内容什么都看不到！</p><h3 id="方式五、-lt-object-gt-标签"><a href="#方式五、-lt-object-gt-标签" class="headerlink" title="方式五、&lt;object&gt;标签"></a>方式五、<code>&lt;object&gt;</code>标签</h3><figure class="highlight livecodeserver"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;object src=<span class="string">"previewUrl"</span> width=<span class="string">"100%"</span> height=<span class="string">"100%"</span>&gt;</span><br><span class="line">  This browser does <span class="keyword">not</span> support PDFs. </span><br><span class="line">  Please download <span class="keyword">the</span> PDF <span class="built_in">to</span> view <span class="keyword">it</span>: </span><br><span class="line">  &lt;<span class="keyword">a</span> href=<span class="string">"previewUrl"</span>&gt;Download PDF&lt;/<span class="keyword">a</span>&gt;</span><br><span class="line">&lt;/object&gt;</span><br></pre></td></tr></table></figure><blockquote><p>除方式二以外其他都是直接通过标签将内容引入页面实现预览</p></blockquote><h3 id="方式六、PDFObject"><a href="#方式六、PDFObject" class="headerlink" title="方式六、PDFObject"></a>方式六、PDFObject</h3><p>PDFObject实际上也是通过<code>&lt;embed&gt;</code>标签实现的直接上代码<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Show PDF<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"utf-8"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span> <span class="attr">src</span>=<span class="string">'pdfobject.min.js'</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span> <span class="attr">type</span>=<span class="string">"text/css"</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="css">        <span class="selector-tag">html</span>,<span class="selector-tag">body</span>,<span class="selector-id">#pdf_viewer</span>&#123;</span></span><br><span class="line"><span class="undefined">            width: 100%;</span></span><br><span class="line"><span class="undefined">            height: 100%;</span></span><br><span class="line"><span class="undefined">            margin: 0;</span></span><br><span class="line"><span class="undefined">            padding: 0;</span></span><br><span class="line"><span class="undefined">        &#125;</span></span><br><span class="line"><span class="undefined">    </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"pdf_viewer"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="actionscript">    <span class="keyword">if</span>(PDFObject.supportsPDFs)&#123;</span></span><br><span class="line"><span class="actionscript">        <span class="comment">// PDF嵌入到网页</span></span></span><br><span class="line"><span class="actionscript">        PDFObject.embed(<span class="string">"index.pdf"</span>, <span class="string">"#pdf_viewer"</span> );</span></span><br><span class="line"><span class="actionscript">    &#125; <span class="keyword">else</span> &#123;</span></span><br><span class="line"><span class="actionscript">        location.href = <span class="string">"/canvas"</span>;</span></span><br><span class="line"><span class="undefined">    &#125;</span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure></p><p>还可以通过以下代码进行判断是否支持PDFObject预览<br><figure class="highlight applescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span>(PDFObject.supportsPDFs)&#123;</span><br><span class="line">   console.<span class="built_in">log</span>(<span class="string">"Yay, this browser supports inline PDFs."</span>);</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">   console.<span class="built_in">log</span>(<span class="string">"Boo, inline PDFs are not supported by this browser"</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h3 id="方式七、PDF-js"><a href="#方式七、PDF-js" class="headerlink" title="方式七、PDF.js"></a>方式七、PDF.js</h3><p>PDF.js可以实现在html下直接浏览pdf文档，是一款开源的pdf文档读取解析插件，非常强大，能将PDF文件渲染成Canvas。PDF.js主要包含两个库文件，一个pdf.js和一个pdf.worker.js，一个负责API解析，一个负责核心解析。</p><h2 id="word、xls、ppt文件在线预览功能"><a href="#word、xls、ppt文件在线预览功能" class="headerlink" title="word、xls、ppt文件在线预览功能"></a>word、xls、ppt文件在线预览功能</h2><p>word、ppt、xls文件实现在线预览的方式比较简单可以直接通过调用微软的在线预览功能实现 (预览前提：资源必须是公共可访问的)<br><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&lt;<span class="selector-tag">iframe</span> src=<span class="string">'https://view.officeapps.live.com/op/view.aspx?src=http://storage.xuetangx.com/public_assets/xuetangx/PDF/1.xls'</span> <span class="attribute">width</span>=<span class="string">'100%'</span> height=<span class="string">'100%'</span> frameborder=<span class="string">'1'</span>&gt;</span><br><span class="line">&lt;/iframe</span><br></pre></td></tr></table></figure></p><p>src就是要实现预览的文件地址</p><p>具体文档看这<a href="https://link.jianshu.com?t=https%3A%2F%2Fblogs.office.com%2Fen-us%2F2013%2F04%2F10%2Foffice-web-viewer-view-office-documents-in-a-browser%2F%3Feu%3Dtrue" target="_blank" rel="noopener">微软接口文档</a></p><h2 id="word文件"><a href="#word文件" class="headerlink" title="word文件"></a>word文件</h2><p><a href="https://link.jianshu.com?t=http%3A%2F%2Fwww.xdocin.com%2Fweb.html%23func" target="_blank" rel="noopener">XDOC</a>可以实现预览以<a href="https://link.jianshu.com?t=http%3A%2F%2Fblog.csdn.net%2Fchenjiaxiang520%2Farticle%2Fdetails%2F53891544" target="_blank" rel="noopener">DataURI</a>表示的DOC文档，此外XDOC还可以实现文本、带参数文本、html文本、json文本、公文等在线预览，具体实现方法请看官方文档</p><p>下面这种方式可以实现快速预览word但是对文件使用的编辑器可能会有一些限制<br><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;a <span class="attribute">href</span>=<span class="string">"http://www.xdocin.com/xdoc?_func=to&amp;amp;_format=html&amp;amp;_cache=1&amp;amp;_xdoc=http://www.xdocin.com/demo/demo.docx"</span> <span class="attribute">target</span>=<span class="string">"_blank"</span> <span class="attribute">rel</span>=<span class="string">"nofollow"</span>&gt;XDOC&lt;/a&gt;</span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;最近应工作需求html预览pdf和word，一些所涉功能知识记录一下,其他教程写得太老了，可能到如今已经不再适用。&lt;/p&gt;
    
    </summary>
    
      <category term="前端" scheme="http://yfzhou.coding.me/categories/%E5%89%8D%E7%AB%AF/"/>
    
    
      <category term="HTML" scheme="http://yfzhou.coding.me/tags/HTML/"/>
    
      <category term="js" scheme="http://yfzhou.coding.me/tags/js/"/>
    
      <category term="office" scheme="http://yfzhou.coding.me/tags/office/"/>
    
      <category term="pdf" scheme="http://yfzhou.coding.me/tags/pdf/"/>
    
      <category term="word" scheme="http://yfzhou.coding.me/tags/word/"/>
    
      <category term="xls" scheme="http://yfzhou.coding.me/tags/xls/"/>
    
      <category term="ppt" scheme="http://yfzhou.coding.me/tags/ppt/"/>
    
  </entry>
  
  <entry>
    <title>Hexo-Next搭建个人博客（主题内加入动态背景）</title>
    <link href="http://yfzhou.coding.me/2018/08/08/Hexo-Next%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2%EF%BC%88%E4%B8%BB%E9%A2%98%E5%86%85%E5%8A%A0%E5%85%A5%E5%8A%A8%E6%80%81%E8%83%8C%E6%99%AF%EF%BC%89/"/>
    <id>http://yfzhou.coding.me/2018/08/08/Hexo-Next搭建个人博客（主题内加入动态背景）/</id>
    <published>2018-08-08T08:48:48.000Z</published>
    <updated>2018-08-08T09:19:19.690Z</updated>
    
    <content type="html"><![CDATA[<p>本文介绍如何给Blog主题添加静态背景和动态背景特效</p><a id="more"></a><h4 id="添加静态背景"><a href="#添加静态背景" class="headerlink" title="添加静态背景"></a>添加静态背景</h4><ol><li>打开博客根目录/themes/next/source/css/_custom/custom.styl文件，编辑如下：</li></ol><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Custom styles.</span></span><br><span class="line"><span class="selector-tag">body</span> &#123; </span><br><span class="line"><span class="attribute">background-image</span>: url(/images/background.png);</span><br><span class="line"><span class="attribute">background-attachment</span>: fixed; <span class="comment">// 不随屏幕滚动而滚动</span></span><br><span class="line"><span class="attribute">background-repeat</span>: no-repeat; <span class="comment">// 如果背景图不够屏幕大小则重复铺，改为no-repeat则表示不重复铺</span></span><br><span class="line"><span class="comment">//background-size: contain; // 等比例铺满屏幕</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="2"><li>将背景图命名为background.png并放入主题根目录/images下</li></ol><h4 id="添加动态背景"><a href="#添加动态背景" class="headerlink" title="添加动态背景"></a>添加动态背景</h4><h1 id="layout-swig"><a href="#layout-swig" class="headerlink" title="_layout.swig"></a><a href="#layout-swig" title="_layout.swig"></a>_layout.swig</h1><p>找到<code>themes\next\layout\_layout.swig</code>文件，添加内容：<br>在<code>&lt;body&gt;</code>里添加：  </p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;div <span class="class"><span class="keyword">class</span></span>=<span class="string">"bg_content"</span>&gt;</span><br><span class="line">  &lt;canvas id=<span class="string">"canvas"</span>&gt;<span class="xml"><span class="tag">&lt;/<span class="name">canvas</span>&gt;</span></span></span><br><span class="line">&lt;<span class="regexp">/div&gt;</span></span><br></pre></td></tr></table></figure><p>仍是该文件，在末尾添加：  </p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span> <span class="attr">src</span>=<span class="string">"/js/src/dynamic_bg.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><h1 id="dynamic-bg-js"><a href="#dynamic-bg-js" class="headerlink" title="dynamic_bg.js"></a><a href="#dynamic-bg-js" title="dynamic_bg.js"></a>dynamic_bg.js</h1><p>在<code>themes\next\source\js\src</code>中新建文件<code>dynamic_bg.js</code>，代码链接中可见：<a href="https://github.com/asdfv1929/asdfv1929.github.io/blob/master/js/src/dynamic_bg.js" target="_blank" rel="noopener">dynamic_bg.js</a></p><h1 id="custom-styl"><a href="#custom-styl" class="headerlink" title="custom.styl"></a><a href="#custom-styl" title="custom.styl"></a>custom.styl</h1><p>在<code>themes\next\source\css\_custom\custom.styl</code>文件末尾添加内容：<br><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.bg_content</span> &#123;</span><br><span class="line">  <span class="attribute">position</span>: fixed;</span><br><span class="line">  <span class="attribute">top</span>: <span class="number">0</span>;</span><br><span class="line">  <span class="attribute">z-index</span>: -<span class="number">1</span>;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">100%</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">100%</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;本文介绍如何给Blog主题添加静态背景和动态背景特效&lt;/p&gt;
    
    </summary>
    
      <category term="Hexo" scheme="http://yfzhou.coding.me/categories/Hexo/"/>
    
    
      <category term="Hexo" scheme="http://yfzhou.coding.me/tags/Hexo/"/>
    
      <category term="Next" scheme="http://yfzhou.coding.me/tags/Next/"/>
    
  </entry>
  
  <entry>
    <title>Hexo-Next搭建个人博客（添加网页音乐播放器功能）</title>
    <link href="http://yfzhou.coding.me/2018/08/08/Hexo-Next%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2%EF%BC%88%E6%B7%BB%E5%8A%A0%E7%BD%91%E9%A1%B5%E9%9F%B3%E4%B9%90%E6%92%AD%E6%94%BE%E5%99%A8%E5%8A%9F%E8%83%BD%EF%BC%89/"/>
    <id>http://yfzhou.coding.me/2018/08/08/Hexo-Next搭建个人博客（添加网页音乐播放器功能）/</id>
    <published>2018-08-08T08:38:02.000Z</published>
    <updated>2018-08-15T03:51:04.598Z</updated>
    
    <content type="html"><![CDATA[<p>为博客添加网页音乐播放器功能  </p><p>效果图：<br><img src="https://yfzhou.oss-cn-beijing.aliyuncs.com/blog/img/music01.png" alt=""></p><a id="more"></a><h1 id="download"><a href="#download" class="headerlink" title="download"></a><a href="#download" title="download"></a>download</h1><p>点击访问Aplayer源码：<a href="https://github.com/MoePlayer/APlayer" target="_blank" rel="noopener">GitHub Aplayer</a>。下载到本地，解压后将<code>dist</code>文件夹复制到<code>themes\next\source</code>文件夹下。</p><h1 id="music-js"><a href="#music-js" class="headerlink" title="music.js"></a><a href="#music-js" title="music.js"></a>music.js</h1><p>新建<code>themes\next\source\dist\music.js</code>文件，添加内容：  </p><figure class="highlight roboconf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line">const ap = new APlayer(&#123;</span><br><span class="line">    <span class="attribute">container</span>: document<span class="variable">.getElementById</span>('aplayer'),</span><br><span class="line">    fixed: true,</span><br><span class="line">    autoplay: false,</span><br><span class="line">    audio: [</span><br><span class="line">&#123;</span><br><span class="line">        name: "canon in d",</span><br><span class="line">        artist: 'Brian Crain',</span><br><span class="line">        url: 'http://pd2tflnys<span class="variable">.bkt</span><span class="variable">.clouddn</span><span class="variable">.com</span>/Brian%20Crain%20-%20canon%20in%20d<span class="variable">.mp</span>3',</span><br><span class="line">        cover: 'http://p1<span class="variable">.music</span>.126<span class="variable">.net</span>/QGb9Vtyw7qHS00uEvPfM6g==/843325418547559<span class="variable">.jpg</span>?param=130y130',</span><br><span class="line">      &#125;,</span><br><span class="line">  &#123;</span><br><span class="line">        name: "Apologize",</span><br><span class="line">        artist: 'Martin Ermen',</span><br><span class="line">        url: 'http://pd2tflnys<span class="variable">.bkt</span><span class="variable">.clouddn</span><span class="variable">.com</span>/Martin%20Ermen%20-%20Apologize<span class="variable">.mp</span>3',</span><br><span class="line">        cover: 'http://p1<span class="variable">.music</span>.126<span class="variable">.net</span>/-_6mcI4VV5IKaiwhUAytbg==/1791104441647901<span class="variable">.jpg</span>?param=130y130',</span><br><span class="line">      &#125;,</span><br><span class="line">  &#123;</span><br><span class="line">        name: "River Flows in You",</span><br><span class="line">        artist: 'Yiruma',</span><br><span class="line">        url: 'http://pd2tflnys<span class="variable">.bkt</span><span class="variable">.clouddn</span><span class="variable">.com</span>/Yiruma%20-%20River%20Flows%20in%20You<span class="variable">.flac</span>',</span><br><span class="line">        cover: 'http://p1<span class="variable">.music</span>.126<span class="variable">.net</span>/8ZRSyI0ZN_4ah8uzsNd1mA==/2324367581169008<span class="variable">.jpg</span>?param=130y130',</span><br><span class="line">      &#125;,</span><br><span class="line">      &#123;</span><br><span class="line">        name: '惊蛰',</span><br><span class="line">        artist: '音阙诗听/王梓钰',</span><br><span class="line">        url: 'http://www<span class="variable">.ytmp</span>3<span class="variable">.cn</span>/down/48755<span class="variable">.mp</span>3',</span><br><span class="line">        cover: 'http://p1<span class="variable">.music</span>.126<span class="variable">.net</span>/5MmXpaP9r88tNzExPGMI8Q==/109951163370350985<span class="variable">.jpg</span>?param=130y130',</span><br><span class="line">      &#125;</span><br><span class="line">    ]</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>源码中对应的参数解释，这边都有： <a href="https://aplayer.js.org/#/zh-Hans/" target="_blank" rel="noopener">Aplayer 中文文档</a></p><p><code>audio</code>对应的便是音频文件，所以音乐播放器需要播放的音乐是需要自己进行相关信息（如歌曲链接、歌词、封面等）的配置。这里放一个mp3音乐外链网站：<a href="http://up.mcyt.net/" target="_blank" rel="noopener">http://up.mcyt.net/</a> ，搜索对应的音乐，然后复制<code>url</code>和右击封面图片链接粘贴到对应的位置上就行了。</p><p>注：由于该外链网站没有歌词链接，我这边没有进行配置，所以播放器在播放音乐时点击歌词是没有显示的。</p><h1 id="layout-swig"><a href="#layout-swig" class="headerlink" title="_layout.swig"></a><a href="#layout-swig" title="_layout.swig"></a>_layout.swig</h1><p>打开<code>themes\next\layout\_layout.swig</code>文件，将<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">"stylesheet"</span> <span class="attr">href</span>=<span class="string">"/dist/APlayer.min.css"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"aplayer"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span> <span class="attr">src</span>=<span class="string">"/dist/APlayer.min.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span> <span class="attr">src</span>=<span class="string">"/dist/music.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure></p><p>添加到<code>&lt;body itemscope ...&gt;</code>后面就行，即在<code>&lt;body&gt;&lt;/body&gt;</code>里面。</p><p>重新生成，访问页面，就能看到左下角的音乐播放器了。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;为博客添加网页音乐播放器功能  &lt;/p&gt;
&lt;p&gt;效果图：&lt;br&gt;&lt;img src=&quot;https://yfzhou.oss-cn-beijing.aliyuncs.com/blog/img/music01.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="Hexo" scheme="http://yfzhou.coding.me/categories/Hexo/"/>
    
    
      <category term="Hexo" scheme="http://yfzhou.coding.me/tags/Hexo/"/>
    
      <category term="Next" scheme="http://yfzhou.coding.me/tags/Next/"/>
    
  </entry>
  
  <entry>
    <title>Hexo-Next搭建个人博客（添加统计访客量以及文章阅读量）</title>
    <link href="http://yfzhou.coding.me/2018/08/08/Hexo-Next%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2%EF%BC%88%E6%B7%BB%E5%8A%A0%E7%BB%9F%E8%AE%A1%E8%AE%BF%E5%AE%A2%E9%87%8F%E4%BB%A5%E5%8F%8A%E6%96%87%E7%AB%A0%E9%98%85%E8%AF%BB%E9%87%8F%EF%BC%89/"/>
    <id>http://yfzhou.coding.me/2018/08/08/Hexo-Next搭建个人博客（添加统计访客量以及文章阅读量）/</id>
    <published>2018-08-08T01:04:37.000Z</published>
    <updated>2018-08-15T03:50:25.881Z</updated>
    
    <content type="html"><![CDATA[<p>使用不蒜子和Lean Cloud给文章添加阅读量和统计访客功能</p><a id="more"></a><h2 id="不蒜子统计功能"><a href="#不蒜子统计功能" class="headerlink" title="不蒜子统计功能"></a>不蒜子统计功能</h2><p>NexT主题集成了不蒜子统计功能,以下为我的配置<br><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Show PV/UV of the website/page with busuanzi.</span></span><br><span class="line"><span class="comment"># Get more information on http://ibruce.info/2015/04/04/busuanzi/</span></span><br><span class="line">busuanzi_count:</span><br><span class="line">  # count values only <span class="keyword">if</span> the other configs are <span class="literal">false</span></span><br><span class="line">  enable: <span class="literal">true</span></span><br><span class="line">  # custom uv span <span class="keyword">for</span> the whole site</span><br><span class="line">  site_uv: <span class="literal">true</span></span><br><span class="line">  site_uv_header: &lt;i <span class="attribute">class</span>=<span class="string">"fa fa-user"</span>&gt;&lt;/i&gt;</span><br><span class="line">  site_uv_footer: 人次</span><br><span class="line">  # custom pv span <span class="keyword">for</span> the whole site</span><br><span class="line">  site_pv: <span class="literal">true</span></span><br><span class="line">  site_pv_header: &lt;i <span class="attribute">class</span>=<span class="string">"fa fa-eye"</span>&gt;&lt;/i&gt;</span><br><span class="line">  site_pv_footer: 次</span><br><span class="line">  # custom pv span <span class="keyword">for</span> one<span class="built_in"> page </span>only</span><br><span class="line">  page_pv: <span class="literal">true</span></span><br><span class="line">  page_pv_header: &lt;i <span class="attribute">class</span>=<span class="string">"fa fa-file-o"</span>&gt;&lt;/i&gt;</span><br><span class="line">  page_pv_footer: 次</span><br></pre></td></tr></table></figure></p><p>当<code>enable: true</code>时，代表开启全局开关。若s<code>ite_uv、site_pv、page_pv</code>的值均为<code>false</code>时，不蒜子仅作记录而不会在页面上显示。<br>当<code>site_uv: true</code>时，代表在页面底部显示站点的UV值。<br>当<code>site_pv: true</code>时，代表在页面底部显示站点的PV值。<br>当<code>page_pv: true</code>时，代表在文章页面的标题下显示该页面的PV值（阅读数）。<br><code>site_uv_header</code>和<code>site_uv_footer</code>这几个为自定义样式配置，相关的值留空时将不显示，可以使用（带特效的）font-awesome。 </p><p>效果图：<br><img src="https://yfzhou.oss-cn-beijing.aliyuncs.com/blog/img/read02.png" alt=""><br><img src="https://yfzhou.oss-cn-beijing.aliyuncs.com/blog/img/read01.png" alt=""></p><h2 id="LeanCloud阅读次数统计"><a href="#LeanCloud阅读次数统计" class="headerlink" title="LeanCloud阅读次数统计"></a>LeanCloud阅读次数统计</h2><p>首先一句话介绍Lean Cloud:</p><blockquote><p><a href="https://leancloud.cn/" target="_blank" rel="noopener">LeanCloud</a>（aka. AVOS Cloud）提供一站式后端云服务，从数据存储、实时聊天、消息推送到移动统计，涵盖应用开发的多方面后端需求。</p></blockquote><p>相比不蒜子的统计，LeanCloud的文章阅读量统计更加稳定靠谱，所以本人也把网站的文章内统计改为LeanCloud的了。</p><h3 id="配置LeanCloud"><a href="#配置LeanCloud" class="headerlink" title="配置LeanCloud"></a><a href="#配置LeanCloud" title="配置LeanCloud"></a>配置<a href="https://leancloud.cn" target="_blank" rel="noopener">LeanCloud</a></h3><p>在注册完成LeanCloud帐号并验证邮箱之后，我们就可以登录我们的LeanCloud帐号，进行一番配置之后拿到<code>AppID</code>以及<code>AppKey</code>这两个参数即可正常使用文章阅读量统计的功能了。</p><h4 id="创建应用"><a href="#创建应用" class="headerlink" title="创建应用"></a><a href="#创建应用" title="创建应用"></a>创建应用</h4><ul><li>我们新建一个应用来专门进行博客的访问统计的数据操作。首先，打开控制台，如下图所示：</li></ul><p><img src="http://7xkj6q.com1.z0.glb.clouddn.com/static/images/leancloud-page-anlysis/open_consoloe.png" alt="" title="打开控制台"></p><ul><li>在出现的界面点击<code>创建应用</code>：</li></ul><p><img src="http://7xkj6q.com1.z0.glb.clouddn.com/static/images/leancloud-page-anlysis/create_app.png" alt="" title="创建应用"></p><ul><li>在接下来的页面，新建的应用名称我们可以随意输入，即便是输入的不满意我们后续也是可以更改的:</li></ul><p><img src="http://7xkj6q.com1.z0.glb.clouddn.com/static/images/leancloud-page-anlysis/creating_app.png" alt="" title="创建的新应用名称"></p><ul><li>这里为了演示的方便，我新创建一个取名为test的应用。创建完成之后我们点击新创建的应用的名字来进行该应用的参数配置：</li></ul><p><img src="http://7xkj6q.com1.z0.glb.clouddn.com/static/images/leancloud-page-anlysis/create_class.png" alt="" title="打开应用参数配置界面"></p><ul><li>在应用的数据配置界面，左侧下划线开头的都是系统预定义好的表，为了便于区分我们新建一张表来保存我们的数据。点击左侧右上角的齿轮图标，新建Class：<br>在弹出的选项中选择<code>创建Class</code>来新建Class用来专门保存我们博客的文章访问量等数据:<br>点击<code>创建Class</code>之后，理论上来说名字可以随意取名，只要你交互代码做相应的更改即可，但是为了保证我们前面对NexT主题的修改兼容，此处的<strong>新建Class名字必须为<code>Counter</code></strong>:</li></ul><p><img src="http://7xkj6q.com1.z0.glb.clouddn.com/static/images/leancloud-page-anlysis/creating_class.png" alt="" title="权限配置"></p><ul><li>由于LeanCloud升级了默认的ACL权限，如果你想避免后续因为权限的问题导致次数统计显示不正常，建议在此处选择<code>无限制</code>。</li></ul><p><img src="http://7xkj6q.com1.z0.glb.clouddn.com/static/images/leancloud-page-anlysis/open_app_key.png" alt="" title="打开应用设置"></p><p>创建完成之后，左侧数据栏应该会多出一栏名为<code>Counter</code>的栏目，这个时候我们点击顶部的设置，切换到test应用的操作界面:<br>在弹出的界面中，选择左侧的<code>应用Key</code>选项，即可发现我们创建应用的<code>AppID</code>以及<code>AppKey</code>，有了它，我们就有权限能够通过主题中配置好的Javascript代码与这个应用的Counter表进行数据存取操作了:</p><p><img src="http://7xkj6q.com1.z0.glb.clouddn.com/static/images/leancloud-page-anlysis/opened_app_key.png" alt="" title="获取Appid、Appkey"></p><p>复制<code>AppID</code>以及<code>AppKey</code>并在NexT主题的<code>_config.yml</code>文件中我们相应的位置填入即可，正确配置之后文件内容像这个样子:</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">leancloud_visitors:</span>  </span><br><span class="line"><span class="attr"> enable:</span> <span class="literal">true</span>  </span><br><span class="line"><span class="attr"> app_id:</span> <span class="string">joaeuuc4hsqudUUwx4gIvGF6-gzGzoHsz</span>  </span><br><span class="line"><span class="attr"> app_key:</span> <span class="string">E9UJsJpw1omCHuS22PdSpKoh</span></span><br></pre></td></tr></table></figure><p>这个时候重新生成部署Hexo博客，应该就可以正常使用文章阅读量统计的功能了。需要特别说明的是：记录文章访问量的唯一标识符是文章的<code>发布日期</code>以及<code>文章的标题</code>，因此请确保这两个数值组合的唯一性，如果你更改了这两个数值，会造成文章阅读数值的清零重计。</p><h3 id="后台管理"><a href="#后台管理" class="headerlink" title="后台管理"></a><a href="#后台管理" title="后台管理"></a>后台管理</h3><p>当你配置部分完成之后，初始的文章统计量显示为0，但是这个时候我们LeanCloud对应的应用的<code>Counter</code>表中并没有相应的记录，只是单纯的显示为0而已，当博客文章在配置好阅读量统计服务之后第一次打开时，便会自动向服务器发送数据来创建一条数据，该数据会被记录在对应的应用的<code>Counter</code>表中。</p><p><img src="https://yfzhou.oss-cn-beijing.aliyuncs.com/blog/img/read03.png" alt="" title="后台管理"></p><p>我们可以修改其中的<code>time</code>字段的数值来达到修改某一篇文章的访问量的目的（博客文章访问量快递提升人气的装逼利器）。双击具体的数值，修改之后回车即可保存。</p><ul><li><code>url</code>字段被当作唯一<code>ID</code>来使用，因此如果你不知道带来的后果的话请不要修改。</li><li><code>title</code>字段显示的是博客文章的标题，用于后台管理的时候区分文章之用，没有什么实际作用。</li><li>其他字段皆为自动生成，具体作用请查阅LeanCloud官方文档，如果你不知道有什么作用请不要随意修改。</li></ul><h3 id="Web安全"><a href="#Web安全" class="headerlink" title="Web安全"></a><a href="#Web安全" title="Web安全"></a>Web安全</h3><p>因为AppID以及AppKey是暴露在外的，因此如果一些别用用心之人知道了之后用于其它目的是得不偿失的，为了确保只用于我们自己的博客，建议开启Web安全选项，这样就只能通过我们自己的域名才有权访问后台的数据了，可以进一步提升安全性。</p><p>选择应用的设置的<code>安全中心</code>选项卡:</p><p><img src="http://7xkj6q.com1.z0.glb.clouddn.com/static/images/leancloud-page-anlysis/open_safe_center.png" alt="" title="进入安全中心"></p><p>在<code>Web 安全域名</code>中填入我们自己的博客域名，来确保数据调用的安全:</p><p><img src="http://7xkj6q.com1.z0.glb.clouddn.com/static/images/leancloud-page-anlysis/bind_domain.png" alt="" title="锁定域名"></p><p>如果你不知道怎么填写安全域名而或者填写完成之后发现博客文章访问量显示不正常，打开浏览器调试模式，发现如下图的输出:</p><p><img src="http://7xkj6q.com1.z0.glb.clouddn.com/static/images/leancloud-page-anlysis/broswer_403.png" alt="" title="Web安全域名填写错误"></p><p>这说明你的安全域名填写错误，导致服务器拒绝了数据交互的请求，你可以更改为正确的安全域名或者你不知道如何修改请在本博文中留言或者放弃设置Web安全域名。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;使用不蒜子和Lean Cloud给文章添加阅读量和统计访客功能&lt;/p&gt;
    
    </summary>
    
      <category term="Hexo" scheme="http://yfzhou.coding.me/categories/Hexo/"/>
    
    
      <category term="Hexo" scheme="http://yfzhou.coding.me/tags/Hexo/"/>
    
      <category term="Next" scheme="http://yfzhou.coding.me/tags/Next/"/>
    
  </entry>
  
  <entry>
    <title>Hexo-Next搭建个人博客（集成DaoVoice在线联系功能）</title>
    <link href="http://yfzhou.coding.me/2018/08/08/Hexo-Next%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2%EF%BC%88%E9%9B%86%E6%88%90DaoVoice%E5%9C%A8%E7%BA%BF%E8%81%94%E7%B3%BB%E5%8A%9F%E8%83%BD%EF%BC%89/"/>
    <id>http://yfzhou.coding.me/2018/08/08/Hexo-Next搭建个人博客（集成DaoVoice在线联系功能）/</id>
    <published>2018-08-08T00:56:39.000Z</published>
    <updated>2018-08-15T03:45:20.198Z</updated>
    
    <content type="html"><![CDATA[<p>之前有访问过一些大佬的个人博客，里面有个在线联系功能，看着不错，所以也试着在自己的站点上接入了此功能。  </p><a id="more"></a><h1 id="注册"><a href="#注册" class="headerlink" title="注册"></a><a href="#注册" title="注册"></a>注册</h1><p>首先在<a href="http://www.daovoice.io/" target="_blank" rel="noopener">DaoVoice</a>注册个账号，点击-&gt;<a href="http://dashboard.daovoice.io/get-started?invite_code=b3c7d22e" target="_blank" rel="noopener">邀请码</a>是<code>b3c7d22e</code>。<br><a href="https://s1.ax1x.com/2018/01/21/pW5DRP.png" target="_blank" rel="noopener"><img src="https://s1.ax1x.com/2018/01/21/pW5DRP.png" alt="pW5DRP.png"></a></p><p>完成后，会得到一个<code>app_id</code>，后面会用到：<br><a href="https://s1.ax1x.com/2018/01/21/pW5yM8.png" target="_blank" rel="noopener"><img src="https://s1.ax1x.com/2018/01/21/pW5yM8.png" alt="appid"></a></p><h1 id="修改head-swig"><a href="#修改head-swig" class="headerlink" title="修改head.swig"></a><a href="#修改head-swig" title="修改head.swig"></a>修改head.swig</h1><p>修改<code>/themes/next/layout/_partials/head.swig</code>文件，添加内容如下：  </p><figure class="highlight django"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="xml"></span><span class="template-tag">&#123;% <span class="name"><span class="name">if</span></span> theme.daovoice %&#125;</span><span class="xml"></span></span><br><span class="line"><span class="xml">  <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="undefined"></span></span></span><br><span class="line"><span class="xml">  (function(i,s,o,g,r,a,m)&#123;i["DaoVoiceObject"]=r;i[r]=i[r]||function()&#123;(i[r].q=i[r].q||[]).push(arguments)&#125;,i[r].l=1*new Date();a=s.createElement(o),m=s.getElementsByTagName(o)[0];a.async=1;a.src=g;a.charset="utf-8";m.parentNode.insertBefore(a,m)&#125;)(window,document,"script",('https:' == document.location.protocol ? 'https:' : 'http:') + "//widget.daovoice.io/widget/0f81ff2f.js","daovoice")</span></span><br><span class="line"><span class="xml">  daovoice('init', &#123;</span></span><br><span class="line"><span class="xml">      app_id: "</span><span class="template-variable">&#123;&#123;theme.daovoice_app_id&#125;&#125;</span><span class="xml">"</span></span><br><span class="line"><span class="xml">    &#125;);</span></span><br><span class="line"><span class="xml">  daovoice('update');</span></span><br><span class="line"><span class="xml">  <span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br><span class="line"><span class="xml"></span><span class="template-tag">&#123;% <span class="name"><span class="name">endif</span></span> %&#125;</span><span class="xml"></span></span><br></pre></td></tr></table></figure><p>位置贴图：<br><a href="https://imgchr.com/i/pWIwmF" target="_blank" rel="noopener"><img src="https://s1.ax1x.com/2018/01/21/pWIwmF.md.png" alt="pWIwmF.md.png"></a></p><h1 id="主题配置文件"><a href="#主题配置文件" class="headerlink" title="主题配置文件"></a><a href="#主题配置文件" title="主题配置文件"></a>主题配置文件</h1><p>在<code>_config.yml</code>文件中添加内容：  </p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Online contact </span></span><br><span class="line"><span class="attr">daovoice:</span> <span class="literal">true</span></span><br><span class="line"><span class="attr">daovoice_app_id:</span> <span class="string">这里输入前面获取的app_id</span></span><br></pre></td></tr></table></figure><h1 id="聊天窗口配置"><a href="#聊天窗口配置" class="headerlink" title="聊天窗口配置"></a><a href="#聊天窗口配置" title="聊天窗口配置"></a>聊天窗口配置</h1><p>附上我的聊天窗口的颜色、位置等设置信息：<br><img src="https://yfzhou.oss-cn-beijing.aliyuncs.com/blog/img/daovoice01.png" alt=""></p><p>至此，网页的在线联系功能已经完成，重新<code>hexo d -g</code>上传GitHub后，页面上就能看到效果了。</p><p>效果图：</p><p><img src="https://yfzhou.oss-cn-beijing.aliyuncs.com/blog/img/daovoice02.png?x-oss-process=style/w200" alt=""></p><p>可以关注小程序接收回复消息，很方便</p><p><img src="https://yfzhou.oss-cn-beijing.aliyuncs.com/blog/img/daovoice03.png?x-oss-process=style/w200" alt=""><br><img src="https://yfzhou.oss-cn-beijing.aliyuncs.com/blog/img/daovoice04.png?x-oss-process=style/w200" alt=""></p><p>现在往右下角看看(～￣▽￣)～ ，欢迎撩我（滑稽）。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;之前有访问过一些大佬的个人博客，里面有个在线联系功能，看着不错，所以也试着在自己的站点上接入了此功能。  &lt;/p&gt;
    
    </summary>
    
      <category term="Hexo" scheme="http://yfzhou.coding.me/categories/Hexo/"/>
    
    
      <category term="Hexo" scheme="http://yfzhou.coding.me/tags/Hexo/"/>
    
      <category term="Next" scheme="http://yfzhou.coding.me/tags/Next/"/>
    
  </entry>
  
  <entry>
    <title>Hexo-Next搭建个人博客（集成LiveRe来必力文章评论功能）</title>
    <link href="http://yfzhou.coding.me/2018/08/08/Hexo-Next%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2%EF%BC%88%E9%9B%86%E6%88%90LiveRe%E6%9D%A5%E5%BF%85%E5%8A%9B%E6%96%87%E7%AB%A0%E8%AF%84%E8%AE%BA%E5%8A%9F%E8%83%BD%EF%BC%89/"/>
    <id>http://yfzhou.coding.me/2018/08/08/Hexo-Next搭建个人博客（集成LiveRe来必力文章评论功能）/</id>
    <published>2018-08-08T00:55:15.000Z</published>
    <updated>2018-08-15T03:48:32.668Z</updated>
    
    <content type="html"><![CDATA[<p>　　由于众所周知的原因，多说评论和网易云跟帖先后都宣布关闭评论服务，一直没有找到好的替换方案。昨天无意看到韩国的Livere（来必力）评论，瞬间就喜欢上了~UI好看，加载时候的那个小幽灵也好可爱=w=而且是国外的，应该没那么容易关闭吧2333下面记录一下步骤~  </p><a id="more"></a><h2 id="准备"><a href="#准备" class="headerlink" title="准备"></a><a href="#准备" title="准备"></a>准备</h2><ol><li>去<a href="https://livere.com/" target="_blank" rel="noopener">Livere官网</a>注册Livere账号。</li><li>选择City版（免费），安装</li><li>进入管理页面-&gt;代码管理-&gt;一般网站，复制data-uid</li></ol><h2 id="在Hexo中添加Livere"><a href="#在Hexo中添加Livere" class="headerlink" title="在Hexo中添加Livere"></a><a href="#在Hexo中添加Livere" title="在Hexo中添加Livere"></a>在Hexo中添加Livere</h2><p>以下基于主题Next，其他主题做法类似</p><ol><li>打开<code>博客根目录/themes/next/_config.yml</code></li><li><p>将# Third Party Services Settings 栏目下其他评论系统如duoshuo、gentie、youyan、disqus用#注释掉，加入以下内容</p><figure class="highlight haskell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta"># Livere评论系统</span></span><br><span class="line">    livere_uid: 上一步中你获取的<span class="class"><span class="keyword">data</span>-uid</span></span><br></pre></td></tr></table></figure></li><li><p>在博客根目录<code>/themes/layout/_scripts/third-party/comments/</code>目录中新建txt文件，重命名为livere.swig，编辑内容如下：</p></li></ol><figure class="highlight django"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="xml"></span><span class="template-tag">&#123;% <span class="name"><span class="name">if</span></span> not (theme.duoshuo and theme.duoshuo.shortname) and not theme.duoshuo_shortname and not theme.disqus_shortname and not theme.hypercomments_id and not theme.gentie_productKey %&#125;</span><span class="xml"></span></span><br><span class="line"><span class="xml">  </span><span class="template-tag">&#123;% <span class="name"><span class="name">if</span></span> theme.livere_uid %&#125;</span><span class="xml"></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span>&gt;</span><span class="undefined"></span></span></span><br><span class="line"><span class="xml">      (function(d, s) &#123;</span></span><br><span class="line"><span class="xml">        var j, e = d.getElementsByTagName(s)[0];</span></span><br><span class="line"><span class="xml">        if (typeof LivereTower === 'function') &#123; return; &#125;</span></span><br><span class="line"><span class="xml">        j = d.createElement(s);</span></span><br><span class="line"><span class="xml">        j.src = 'https://cdn-city.livere.com/js/embed.dist.js';</span></span><br><span class="line"><span class="xml">        j.async = true;</span></span><br><span class="line"><span class="xml">        e.parentNode.insertBefore(j, e);</span></span><br><span class="line"><span class="xml">      &#125;)(document, 'script');</span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br><span class="line"><span class="xml">  </span><span class="template-tag">&#123;% <span class="name"><span class="name">endif</span></span> %&#125;</span><span class="xml"></span></span><br><span class="line"><span class="xml"></span><span class="template-tag">&#123;% <span class="name"><span class="name">endif</span></span> %&#125;</span><span class="xml"></span></span><br></pre></td></tr></table></figure><ol start="4"><li><p>在<code>博客根目录/themes/layout/_scripts/third-party/comments.swig</code>文件中追加：</p><figure class="highlight django"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="xml"></span><span class="template-tag">&#123;% <span class="name"><span class="name">include</span></span> './comments/livere.swig' %&#125;</span><span class="xml"></span></span><br></pre></td></tr></table></figure></li><li><p>在博客根目录<code>/themes/layout/_partials/comments.swig</code>文件中条件最后追加 LiveRe 插件是否引用的判断逻辑：</p><figure class="highlight django"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="xml"></span><span class="template-tag">&#123;% <span class="name">elseif</span> theme.livere_uid %&#125;</span><span class="xml"></span></span><br><span class="line"><span class="xml">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"lv-container"</span> <span class="attr">data-id</span>=<span class="string">"city"</span> <span class="attr">data-uid</span>=<span class="string">"</span></span></span><span class="template-variable">&#123;&#123; theme.livere_uid &#125;&#125;</span><span class="xml"><span class="tag"><span class="string">"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="xml"></span><span class="template-tag">&#123;% <span class="name"><span class="name">endif</span></span> %&#125;</span><span class="xml"></span></span><br></pre></td></tr></table></figure></li></ol><p>重新<code>hexo clean、hexo d -g</code>，然后就可以看到来必力评论啦~ </p><p>ps:因为是国外的，评论加载有点慢。 </p><h6 id="效果图"><a href="#效果图" class="headerlink" title="效果图"></a>效果图</h6><p><img src="https://yfzhou.oss-cn-beijing.aliyuncs.com/blog/img/liveRe01.png" alt=""></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;　　由于众所周知的原因，多说评论和网易云跟帖先后都宣布关闭评论服务，一直没有找到好的替换方案。昨天无意看到韩国的Livere（来必力）评论，瞬间就喜欢上了~UI好看，加载时候的那个小幽灵也好可爱=w=而且是国外的，应该没那么容易关闭吧2333下面记录一下步骤~  &lt;/p&gt;
    
    </summary>
    
      <category term="Hexo" scheme="http://yfzhou.coding.me/categories/Hexo/"/>
    
    
      <category term="Hexo" scheme="http://yfzhou.coding.me/tags/Hexo/"/>
    
      <category term="Next" scheme="http://yfzhou.coding.me/tags/Next/"/>
    
  </entry>
  
  <entry>
    <title>Hexo-Next搭建个人博客（集成Algolia站内搜索引擎）</title>
    <link href="http://yfzhou.coding.me/2018/08/08/Hexo-Next%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2%EF%BC%88%E9%9B%86%E6%88%90Algolia%E7%AB%99%E5%86%85%E6%90%9C%E7%B4%A2%E5%BC%95%E6%93%8E%EF%BC%89/"/>
    <id>http://yfzhou.coding.me/2018/08/08/Hexo-Next搭建个人博客（集成Algolia站内搜索引擎）/</id>
    <published>2018-08-08T00:53:22.000Z</published>
    <updated>2018-08-15T03:34:05.846Z</updated>
    
    <content type="html"><![CDATA[<p>起因Swiftype现在收费了，也没有免费版本。Local Search搜索体验不好，微搜索Next官网上描述太少！所以选择Algolia。 注：Algolia搜索在版本<strong> 5.1.0 </strong>中引入，要使用此功能请确保所使用的 NexT 版本在此之后</p><a id="more"></a><h2 id="首先注册Algolia账户"><a href="#首先注册Algolia账户" class="headerlink" title="首先注册Algolia账户"></a>首先注册Algolia账户</h2><p><a href="https://link.juejin.im?target=https%3A%2F%2Fwww.algolia.com%2Fusers%2Fsign_in" target="_blank" rel="noopener">Algolia 登陆页面https://www.algolia.com/users/sign_in</a> ，可以使用 GitHub 或者 Google 账户直接登录，也可以注册一个新账户。我直接用谷歌账户登陆了，注册后的 14 天内拥有所有功能（包括收费类别的）。之后若未续费会自动降级为免费账户，免费账户 总共有 10,000 条记录，每月有 100,000 的可以操作数。</p><p>注册完成后，创建一个新的 Index，这个 index name 之后会用到<br><img src="https://upload-images.jianshu.io/upload_images/3899681-c00f0825ef763c9e.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/700" alt=""></p><p>Index 创建完成后，此时这个 Index 里未包含任何数据。 接下来需要安装 Hexo Algolia 扩展， 这个扩展的功能是搜集站点的内容并通过 API 发送给 Algolia。前往站点根目录，执行命令安装：<br><figure class="highlight cmake"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm <span class="keyword">install</span> hexo-algolia --save  <span class="comment"># 目前最新版本是1.2.5，下面的操作都是基于这个版本的文档</span></span><br></pre></td></tr></table></figure></p><h2 id="获取-Key，更新站点根目录配置"><a href="#获取-Key，更新站点根目录配置" class="headerlink" title="获取 Key，更新站点根目录配置"></a>获取 Key，更新站点根目录配置</h2><p><img src="http://www.qingpingshan.com/uploads/allimg/180511/1440043942-0.png" alt=""></p><p>前往站点根目录打开_config.yml添加以下代码<br><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Algolia Search API Key</span></span><br><span class="line"><span class="attr">algolia:</span></span><br><span class="line"><span class="attr">  applicationID:</span> <span class="string">'你的Application ID'</span></span><br><span class="line"><span class="attr">  apiKey:</span> <span class="string">'你的Search-Only API Key'</span></span><br><span class="line"><span class="attr">  adminApiKey:</span> <span class="string">'你的Admin API Key'</span></span><br><span class="line"><span class="attr">  indexName:</span> <span class="string">'输入刚才创建index name'</span></span><br><span class="line"><span class="attr">  chunkSize:</span> <span class="number">5000</span></span><br></pre></td></tr></table></figure></p><h2 id="修改Algolia搜索ACL（访问控制列表）"><a href="#修改Algolia搜索ACL（访问控制列表）" class="headerlink" title="修改Algolia搜索ACL（访问控制列表）"></a>修改Algolia搜索ACL（访问控制列表）</h2><p><img src="http://www.qingpingshan.com/uploads/allimg/180511/1440041313-1.png" alt=""></p><p>选中后保存。</p><h2 id="操作完成后去你的博客跟路径执行命令"><a href="#操作完成后去你的博客跟路径执行命令" class="headerlink" title="操作完成后去你的博客跟路径执行命令"></a>操作完成后去你的博客跟路径执行命令</h2><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="builtin-name">set</span> <span class="attribute">HEXO_ALGOLIA_INDEXING_KEY</span>=你的Search-Only API Key</span><br></pre></td></tr></table></figure><p>查看是否设置成功如果没有值就设置失败<br><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">hexo clean</span></span><br><span class="line"><span class="attribute">hexo algolia</span></span><br></pre></td></tr></table></figure></p><p><img src="https://yfzhou.oss-cn-beijing.aliyuncs.com/blog/img/algolia02.png" alt=""></p><h2 id="成功后修改Next主题配置文件"><a href="#成功后修改Next主题配置文件" class="headerlink" title="成功后修改Next主题配置文件"></a>成功后修改Next主题配置文件</h2><p>更改Next主题配置文件，找到 Algolia Search 配置部分：<br><figure class="highlight dts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta"># Algolia Search</span></span><br><span class="line"><span class="symbol">algolia_search:</span></span><br><span class="line"><span class="symbol">  enable:</span> true</span><br><span class="line"><span class="symbol">  hits:</span></span><br><span class="line"><span class="symbol">    per_page:</span> <span class="number">10</span></span><br><span class="line"><span class="symbol">  labels:</span></span><br><span class="line"><span class="symbol">    input_placeholder:</span> 输入关键字</span><br><span class="line"><span class="symbol">    hits_empty:</span> <span class="string">"没有找到与 $&#123;query&#125; 相关的内容"</span></span><br><span class="line"><span class="symbol">    hits_stats:</span> <span class="string">"$&#123;hits&#125;条相关记录，共耗时$&#123;time&#125; ms"</span></span><br></pre></td></tr></table></figure></p><p>将 enable 改为 true 即可，根据需要你可以调整 labels 中的文本。这个是我修改的文本。</p><p>最终效果</p><p><img src="https://yfzhou.oss-cn-beijing.aliyuncs.com/blog/img/algolia01.png" alt=""></p><h2 id="总结一下集成遇到的BUG"><a href="#总结一下集成遇到的BUG" class="headerlink" title="总结一下集成遇到的BUG"></a>总结一下集成遇到的BUG</h2><h6 id="Please-set-an-HEXO-ALGOLIA-INDEXING-KEY-environment-variable-to-enable-content-indexing"><a href="#Please-set-an-HEXO-ALGOLIA-INDEXING-KEY-environment-variable-to-enable-content-indexing" class="headerlink" title="Please set an HEXO_ALGOLIA_INDEXING_KEY environment variable to enable content indexing."></a>Please set an <code>HEXO_ALGOLIA_INDEXING_KEY</code> environment variable to enable content indexing.</h6><p><img src="https://yfzhou.oss-cn-beijing.aliyuncs.com/blog/img/algolia04.png" alt=""></p><p>原因：Algolia Search API Key indexName 错了</p><p>解决方案：看下之前新建index的名字</p><h6 id="Not-enough-rights-to-update-an-object-near-line-1-column-1635"><a href="#Not-enough-rights-to-update-an-object-near-line-1-column-1635" class="headerlink" title="Not enough rights to update an object near line:1 column:1635"></a>Not enough rights to update an object near line:1 column:1635</h6><p><img src="https://yfzhou.oss-cn-beijing.aliyuncs.com/blog/img/algolia03.png" alt=""></p><p>原因：没有修改Algolia搜索ACL（访问控制列表）</p><p>解决方案： 按步骤3勾选上就可以</p><h3 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h3><ul><li><a href="https://www.jianshu.com/p/fa2354d61e37" title="hexo+next添加algolia搜索" target="_blank" rel="noopener">《hexo+next添加algolia搜索》</a></li></ul><h3 id="帮助文档"><a href="#帮助文档" class="headerlink" title="帮助文档"></a>帮助文档</h3><ul><li><a href="https://www.npmjs.com/package/hexo-algolia" title="《hexo-algolia》" target="_blank" rel="noopener">《hexo-algolia》</a></li></ul><h2 id="更多教程可以来我yufeng-Zhou独立博客里面看到"><a href="#更多教程可以来我yufeng-Zhou独立博客里面看到" class="headerlink" title="更多教程可以来我yufeng.Zhou独立博客里面看到"></a>更多教程可以来我<a href="http://yfzhou.coding.me/">yufeng.Zhou</a>独立博客里面看到</h2><p><strong>转载请注明出处<a href="http://yfzhou.coding.me/">http://yfzhou.coding.me/</a></strong></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;起因Swiftype现在收费了，也没有免费版本。Local Search搜索体验不好，微搜索Next官网上描述太少！所以选择Algolia。 注：Algolia搜索在版本&lt;strong&gt; 5.1.0 &lt;/strong&gt;中引入，要使用此功能请确保所使用的 NexT 版本在此之后&lt;/p&gt;
    
    </summary>
    
      <category term="Hexo" scheme="http://yfzhou.coding.me/categories/Hexo/"/>
    
    
      <category term="Hexo" scheme="http://yfzhou.coding.me/tags/Hexo/"/>
    
      <category term="Next" scheme="http://yfzhou.coding.me/tags/Next/"/>
    
  </entry>
  
  <entry>
    <title>Hexo-Next搭建个人博客（托管到Github和Coding）</title>
    <link href="http://yfzhou.coding.me/2018/08/07/Hexo-Next%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2%EF%BC%88%E6%89%98%E7%AE%A1%E5%88%B0Github%E5%92%8CCoding%EF%BC%89/"/>
    <id>http://yfzhou.coding.me/2018/08/07/Hexo-Next搭建个人博客（托管到Github和Coding）/</id>
    <published>2018-08-07T14:55:27.000Z</published>
    <updated>2018-08-07T15:15:51.950Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>这是一篇很详细的独立博客搭建教程，意在帮助小白们能快速入门，拥有自己的独立博客。作者已在window平台已搭建成功，博客效果请点<a href="https://yfzhou.coding.me/">链接</a>查看。  </p><h3 id="为什么用Hexo搭建独立博客？"><a href="#为什么用Hexo搭建独立博客？" class="headerlink" title="为什么用Hexo搭建独立博客？"></a>为什么用Hexo搭建独立博客？</h3><p>Hexo 是一个快速、简洁且高效的博客框架。Hexo 使用 Markdown（或其他渲染引擎）解析文章，在几秒内，即可利用靓丽的主题生成静态网页。</p><a id="more"></a><h3 id="Github和Coding又是什么？"><a href="#Github和Coding又是什么？" class="headerlink" title="Github和Coding又是什么？"></a>Github和Coding又是什么？</h3><ul><li>Github是国外免费的Git代码托管平台。利用Github Page服务可以免费创建一个静态网站。</li><li>Coding则是国内Git代码托管平台。国内首个Git代码托管平台GitCafe已被Coding收购。也提供page服务。</li></ul><p><img src="http://7xs5l8.com1.z0.glb.clouddn.com/02.png" alt="GitCafe"></p><h3 id="为什么用两个代码托管平台？"><a href="#为什么用两个代码托管平台？" class="headerlink" title="为什么用两个代码托管平台？"></a>为什么用两个代码托管平台？</h3><p>很多人都把hexo托管到github上，因为github大家都用的比较久了。但是，你的博客主要访问者肯定还是国内的用户，国内的用户访问coding比github是要快不少的。还可以利用域名解析实现国内的走coding，海外的走github，分流网站的访问。</p><h2 id="步骤"><a href="#步骤" class="headerlink" title="步骤"></a>步骤</h2><h3 id="安装Git"><a href="#安装Git" class="headerlink" title="安装Git"></a>安装Git</h3><blockquote><p>Git是什么？<br>Git是目前世界上最先进的分布式版本控制系统（没有之一）。<br>了解更多，参考<a href="http://www.liaoxuefeng.com/wiki/0013739516305929606dd18361248578c67b8067c8c017b000" target="_blank" rel="noopener">git教程</a></p></blockquote><ul><li><a href="https://git-for-windows.github.io/" target="_blank" rel="noopener">点击下载</a>，然后按默认选项安装即可。<img src="http://7xs5l8.com1.z0.glb.clouddn.com/00.png" alt="Bash"></li><li>安装完成后，在开始菜单里找到“Git”-&gt;“Git Bash”，蹦出一个类似命令行窗口的东西，就说明Git安装成功！</li></ul><p><img src="http://7xs5l8.com1.z0.glb.clouddn.com/0.jpg" alt="命令窗口"></p><ul><li>安装完成后，还需要最后一步设置，在命令行输入<figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ git<span class="built_in"> config </span>--global user.name <span class="string">"Your Name"</span></span><br><span class="line">$ git<span class="built_in"> config </span>--global user.email <span class="string">"email@example.com"</span></span><br></pre></td></tr></table></figure></li></ul><p>因为Git是分布式版本控制系统，所以，每个机器都必须自报家门：你的名字和Email地址。</p><p><strong>注意</strong><code>git config</code>命令的<code>--global</code>参数，用了这个参数，表示你这台机器上所有的Git仓库都会使用这个配置，当然也可以对某个仓库指定不同的用户名和Email地址。</p><h3 id="将博客托管到Github和Coding上"><a href="#将博客托管到Github和Coding上" class="headerlink" title="将博客托管到Github和Coding上"></a>将博客托管到Github和Coding上</h3><h4 id="托管到github"><a href="#托管到github" class="headerlink" title="托管到github"></a>托管到github</h4><ul><li>注册github帐号<br>访问<a href="https://github.com/" target="_blank" rel="noopener">官网</a>注册,你的username和邮箱十分重要，GitHub上很多通知都是通过邮箱的。比如你的主页上传并构建成功会通过邮箱通知，更重要的是，如果构建失败的话也会在邮件中说明原因。</li><li>创建项目仓库<br>注册并登陆Github官网成功后，点击页面右上角的+，选择New repository。<br><img src="http://7xs5l8.com1.z0.glb.clouddn.com/wangzhan20163281.png" alt="+"><br>在Repository name中填写Github账号名.github.io<br><img src="http://7xs5l8.com1.z0.glb.clouddn.com/wangzhan%E6%88%AA%E5%9B%BE02.png" alt="创建仓库"><br>点击Create repository，完成创建。</li></ul><h4 id="托管到coding"><a href="#托管到coding" class="headerlink" title="托管到coding"></a>托管到coding</h4><ul><li>注册coding帐号<br>访问<a href="https://coding.net/" target="_blank" rel="noopener">官网</a>注册并登录</li><li>创建仓库<br>点+创建项目<br><img src="http://7xs5l8.com1.z0.glb.clouddn.com/wangzhan%E6%88%AA%E5%9B%BE04.png" alt="+"><br>填写项目名称描述创建即可,<br><img src="http://7xs5l8.com1.z0.glb.clouddn.com/wangzhan1637925-3cbdade49c4ed7ba.png" alt="创建"></li></ul><h4 id="配置SHH"><a href="#配置SHH" class="headerlink" title="配置SHH"></a>配置SHH</h4><p>配置shh key是让本地git项目与远程的github建立联系  </p><ul><li><p>检查是否已经有SSH Key，打开Git Bash，输入</p><figure class="highlight jboss-cli"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">cd</span> ~<span class="string">/.ssh</span></span><br></pre></td></tr></table></figure></li><li><p>如果没有.ssh这个目录，则生成一个新的SSH，输入</p><figure class="highlight excel"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ssh-keygen -<span class="built_in">t</span> rsa -C <span class="string">"your e-mail"</span></span><br></pre></td></tr></table></figure></li></ul><p>注意1: 此处的邮箱地址，你可以输入自己的邮箱地址；注意2: 此处的「-C」的是大写的「C」  </p><ul><li>接下来几步都直接按回车键,然后系统会要你输入密码<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Enter passphrase (empty <span class="keyword">for</span> no passphrase):<span class="xml"><span class="tag">&lt;<span class="name">输入加密串</span>&gt;</span></span></span><br><span class="line"><span class="xml">Enter same passphrase again:<span class="tag">&lt;<span class="name">再次输入加密串</span>&gt;</span></span></span><br></pre></td></tr></table></figure></li></ul><p>这个密码会在你提交项目时使用，如果为空的话提交项目时则不用输入。这个设置是防止别人往你的项目里提交内容。<br>注意：输入密码的时候没有*字样的，你直接输入就可以了。  </p><ul><li>最后看到这样的界面，就成功设置ssh key了<br><img src="http://7xs5l8.com1.z0.glb.clouddn.com/wangzhanssh%20key.jpg" alt="ssh key"></li></ul><h4 id="添加-SSH-Key-到-GitHub和Coding"><a href="#添加-SSH-Key-到-GitHub和Coding" class="headerlink" title="添加 SSH Key 到 GitHub和Coding"></a>添加 SSH Key 到 GitHub和Coding</h4><ul><li><p>打开Git Bash，然后输入</p><figure class="highlight jboss-cli"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">cd</span> ~<span class="string">/.ssh</span></span><br></pre></td></tr></table></figure></li><li><p>进入到.shh文件夹中再输入ls，查看是否有id_rsa.pub文件<br><img src="http://7xs5l8.com1.z0.glb.clouddn.com/wangzhan%E6%88%AA%E5%9B%BE05.png" alt=""></p></li><li>输入cat命令，打开id_rsa.pub文件<figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">cat</span> <span class="selector-tag">id_rsa</span><span class="selector-class">.pub</span></span><br></pre></td></tr></table></figure></li></ul><p><img src="http://7xs5l8.com1.z0.glb.clouddn.com/wangzhan%E6%88%AA%E5%9B%BE06.png" alt="">  </p><ul><li>再鼠标全选中右击复制  </li><li>再配置到GitHub和Coding的SSH中<br>进入Github官网，点击+旁边的头像，再按settings进入设置<br><img src="http://7xs5l8.com1.z0.glb.clouddn.com/wangzhan%E6%88%AA%E5%9B%BE07.png" alt=""><br>在点击New SSH key创建<br><img src="http://7xs5l8.com1.z0.glb.clouddn.com/wangzhan%E6%88%AA%E5%9B%BE08.png" alt=""><br>title输入邮箱，key里面粘贴刚才右击复制的内容,再点Add SSH key<br><img src="http://7xs5l8.com1.z0.glb.clouddn.com/wangzhan%E6%88%AA%E5%9B%BE10.png" alt=""><br>同样进入coding,点击账户，在点SSH公钥设置即可<br><img src="http://7xs5l8.com1.z0.glb.clouddn.com/wangzhan%E6%88%AA%E5%9B%BE11.png" alt=""></li></ul><h4 id="测试SSH是否配置成功"><a href="#测试SSH是否配置成功" class="headerlink" title="测试SSH是否配置成功"></a>测试SSH是否配置成功</h4><ul><li><p>打开Git Bash，然后输入</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">ssh</span> <span class="selector-tag">-T</span> <span class="selector-tag">git</span>@<span class="keyword">github</span>.<span class="keyword">com</span></span><br></pre></td></tr></table></figure></li><li><p>如配置了密码则要输入密码,输完按回车<br>如果显示以下内容，则说明Github中的ssh配置成功。</p><figure class="highlight irpf90"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Hi username<span class="comment">! You've successfully authenticated, but GitHub does not</span></span><br><span class="line"><span class="keyword">provide</span> shell <span class="keyword">access</span>.</span><br></pre></td></tr></table></figure></li><li><p>再输入</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">ssh</span> <span class="selector-tag">-T</span> <span class="selector-tag">git</span>@<span class="keyword">git</span>.<span class="keyword">coding</span>.<span class="keyword">net</span></span><br></pre></td></tr></table></figure></li></ul><p>如果显示以下则说明coding中的ssh配置成功<br><figure class="highlight applescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Hello username You've connected <span class="keyword">to</span> Coding.net <span class="keyword">by</span> SSH successfully!</span><br></pre></td></tr></table></figure></p><h4 id="创建Github-Pages和Coding-Pages-服务"><a href="#创建Github-Pages和Coding-Pages-服务" class="headerlink" title="创建Github Pages和Coding Pages 服务"></a>创建Github Pages和Coding Pages 服务</h4><ul><li>GitHub Pages分两种，一种是你的GitHub用户名建立的username.github.io这样的用户&amp;组织页（站），另一种是依附项目的pages。想建立个人博客是用的第一种，形如cnfeat.github.io这样的可访问的站，每个用户名下面只能建立一个。<a href="https://help.github.com/articles/user-organization-and-project-pages/" target="_blank" rel="noopener">更多</a></li><li>官网点击代码再点击Coding Pages 服务开启。分支和github分支写一样，填写master<br><img src="http://7xs5l8.com1.z0.glb.clouddn.com/wangzhan%E6%88%AA%E5%9B%BE13.png" alt=""></li></ul><h4 id="将博客网站上传到GitHub和Coding中"><a href="#将博客网站上传到GitHub和Coding中" class="headerlink" title="将博客网站上传到GitHub和Coding中"></a>将博客网站上传到GitHub和Coding中</h4><ul><li>打开D:\blog文件夹中的_config.yml文件，找到如下位置，填写</li></ul><figure class="highlight dts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta"># Deployment</span></span><br><span class="line"><span class="meta">## Docs: https:<span class="comment">//hexo.io/docs/deployment.html</span></span></span><br><span class="line"><span class="symbol">deploy:</span></span><br><span class="line"><span class="symbol">  type:</span> git</span><br><span class="line"><span class="symbol">  repo:</span></span><br><span class="line"><span class="symbol">      github:</span> git@github.com:yourname/yourname.github.io.git,master</span><br><span class="line"><span class="symbol">      coding:</span> git@git.coding.net:yourname/yourname.git,master</span><br></pre></td></tr></table></figure><p><strong>注：</strong> (1) 其中yourname替换成你的Github账户名;(2)注意在yml文件中，:后面都是要带空格的。<br><img src="http://7xs5l8.com1.z0.glb.clouddn.com/wangzhan%E6%88%AA%E5%9B%BE14.png" alt="">  </p><ul><li>在<strong>blog文件夹</strong>中空白处右击打开Git Bash输入<figure class="highlight applescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">npm install hexo-deployer-git <span class="comment">--save</span></span><br><span class="line">hexo g <span class="comment">#生成静态网页</span></span><br><span class="line">hexo d <span class="comment">#开始部署</span></span><br></pre></td></tr></table></figure></li></ul><p>此时，通过访问<a href="http://yourname.github.io" target="_blank" rel="noopener">http://yourname.github.io</a>和<a href="http://yourname.coding.me可以看到默认的Hexo首页面（与之前本地测试时一样）。" target="_blank" rel="noopener">http://yourname.coding.me可以看到默认的Hexo首页面（与之前本地测试时一样）。</a></p><h4 id="更换Hexo主题"><a href="#更换Hexo主题" class="headerlink" title="更换Hexo主题"></a>更换Hexo主题</h4><p>本网站使用的是Next主题。该主题简洁易用，在移动端也表现不错。  </p><ul><li><p>下载主题<br>在<strong>blog文件夹</strong>中空白处右击打开Git Bash输入</p><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git clone http<span class="variable">s:</span>//github.<span class="keyword">com</span>/iissnan/hexo-theme-<span class="keyword">next</span> themes/<span class="keyword">next</span></span><br></pre></td></tr></table></figure></li><li><p>修改网站的主题为Next<br>打开D:\blog下的_config.yml文件，找到theme字段，将其修改为next</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> Extensions</span></span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="comment"># Plugins: http://hexo.io/plugins/</span></span></span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="comment"># Themes: http://hexo.io/themes/</span></span></span><br><span class="line">theme: next</span><br></pre></td></tr></table></figure></li><li><p>验证主题是否可用<br>输入</p><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">hexo</span> s <span class="comment">#启动服务，调试用</span></span><br></pre></td></tr></table></figure></li></ul><p>再在浏览器输入<a href="http://localhost:4000/" target="_blank" rel="noopener">http://localhost:4000/</a>确认网站主题是否切换为Next.  </p><ul><li>博客blog根目录下的_config.yml配置网站信息<br>_config.yml配置请点<a href="https://github.com/xirong/hexo-theme-next/blob/master/_config_root.yml" target="_blank" rel="noopener">参考</a></li></ul><h3 id="注册及绑定自己的域名地址"><a href="#注册及绑定自己的域名地址" class="headerlink" title="注册及绑定自己的域名地址"></a>注册及绑定自己的域名地址</h3><h4 id="域名注册"><a href="#域名注册" class="headerlink" title="域名注册"></a>域名注册</h4><p>推荐选择国内的万网或者国外的Goddady进行域名的注册，注册完还需改下绑定DNS服务商</p><h4 id="域名解析"><a href="#域名解析" class="headerlink" title="域名解析"></a>域名解析</h4><p>如果你选择的是万网注册的域名，可以使用其自带的域名解析服务。<br>也可以选择免费的<a href="https://www.dnspod.cn/" target="_blank" rel="noopener">DNSPod</a>  </p><ul><li>域名解析填写如下图<br><img src="http://7xs5l8.com1.z0.glb.clouddn.com/wangzhan1637925-bc9fbfb9af5e3b77.png" alt="">  </li><li>打开blog文件夹下的source文件夹，新建CNAME文件,内容填写自己的域名<br>CNAME文件设置的目的是，通过访问 yourname.github.io 可以跳转到你所注册的域名上。<br>github是直接项目里面加CNAME文件。coding是直接在项目主页设置的，去coding项目主页添加CNAME，绑定域名。</li></ul><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>只要按照上面步骤一步步设置，相信你也可以拥有自己的独立博客。希望此文对还在搭建hexo独立博客的小伙伴有所帮助。主题相关配置查看下面的，hexo和next帮助文档。</p><h3 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h3><ul><li><a href="http://www.jeyzhang.com/hexo-github-blog-building.html" target="_blank" rel="noopener">《Hexo+Github: 搭建属于自己的静态博客》</a></li><li><a href="http://ibruce.info/2013/11/22/hexo-your-blog/?utm_source=tuicool" target="_blank" rel="noopener">《hexo你的博客》</a></li><li><a href="http://blog.shijinrong.cn/2016/01/03/2016-01-03-how-to-build-blog/" target="_blank" rel="noopener">《如何使用10个小时搭建出个人域名而又Geek的独立博客？》</a></li><li><a href="http://tengj.top/2016/03/06/hexo%E5%B9%B2%E8%B4%A7%E7%B3%BB%E5%88%97%EF%BC%9A%EF%BC%88%E5%9B%9B%EF%BC%89%E5%B0%86hexo%E5%8D%9A%E5%AE%A2%E5%90%8C%E6%97%B6%E6%89%98%E7%AE%A1%E5%88%B0github%E5%92%8Ccoding/" target="_blank" rel="noopener">《将hexo博客同时托管到github和coding》</a></li><li><a href="https://segmentfault.com/q/1010000004557073?_ea=651524" target="_blank" rel="noopener">《个人域名如何同时绑定 github 和 coding 上的博客》</a></li><li><a href="http://blog.csdn.net/poem_of_sunshine/article/details/29369785/" target="_blank" rel="noopener">《如何搭建一个独立博客——简明Github Pages与Hexo教程》</a></li><li><a href="http://mousycoder.com/2015/10/19/classic-tutorial-of-hexo-blog/" target="_blank" rel="noopener">《「搭建Hexo博客」简明教程》</a></li><li><a href="http://www.ixirong.com/2015/05/17/how-to-build-ixirong-blog/" target="_blank" rel="noopener">《使用 github Pages 服务建立 ixirong.com 独立博客全过程》</a></li><li><a href="http://shenshanlaoyuan.com/" target="_blank" rel="noopener">深山老猿</a></li></ul><h3 id="帮助文档"><a href="#帮助文档" class="headerlink" title="帮助文档"></a>帮助文档</h3><ul><li><a href="https://hexo.io/zh-cn/docs/" target="_blank" rel="noopener">《Hexo文档》</a></li><li><a href="http://theme-next.iissnan.com/getting-started.html" target="_blank" rel="noopener">《Next使用文档》</a></li><li><a href="http://www.liaoxuefeng.com/wiki/0013739516305929606dd18361248578c67b8067c8c017b000" target="_blank" rel="noopener">《Git教程》</a></li><li><a href="https://help.github.com/" target="_blank" rel="noopener">《Github帮助文档》</a></li><li><a href="https://coding.net/help/" target="_blank" rel="noopener">《Coding帮助文档》</a></li><li><a href="http://wowubuntu.com/markdown/" target="_blank" rel="noopener">《Markdown 语法说明》</a></li></ul><h2 id="更多教程可以来我yufeng-Zhou独立博客里面看到"><a href="#更多教程可以来我yufeng-Zhou独立博客里面看到" class="headerlink" title="更多教程可以来我yufeng.Zhou独立博客里面看到"></a>更多教程可以来我<a href="http://yfzhou.coding.me/">yufeng.Zhou</a>独立博客里面看到</h2><p><strong>转载请注明出处<a href="http://yfzhou.coding.me/">http://yfzhou.coding.me/</a></strong></p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;这是一篇很详细的独立博客搭建教程，意在帮助小白们能快速入门，拥有自己的独立博客。作者已在window平台已搭建成功，博客效果请点&lt;a href=&quot;https://yfzhou.coding.me/&quot;&gt;链接&lt;/a&gt;查看。  &lt;/p&gt;
&lt;h3 id=&quot;为什么用Hexo搭建独立博客？&quot;&gt;&lt;a href=&quot;#为什么用Hexo搭建独立博客？&quot; class=&quot;headerlink&quot; title=&quot;为什么用Hexo搭建独立博客？&quot;&gt;&lt;/a&gt;为什么用Hexo搭建独立博客？&lt;/h3&gt;&lt;p&gt;Hexo 是一个快速、简洁且高效的博客框架。Hexo 使用 Markdown（或其他渲染引擎）解析文章，在几秒内，即可利用靓丽的主题生成静态网页。&lt;/p&gt;
    
    </summary>
    
      <category term="Hexo" scheme="http://yfzhou.coding.me/categories/Hexo/"/>
    
    
      <category term="Hexo" scheme="http://yfzhou.coding.me/tags/Hexo/"/>
    
      <category term="Next" scheme="http://yfzhou.coding.me/tags/Next/"/>
    
  </entry>
  
  <entry>
    <title>Hexo-Next搭建个人博客（安装与部署）</title>
    <link href="http://yfzhou.coding.me/2018/08/07/Hexo-Next%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2%EF%BC%88%E5%AE%89%E8%A3%85%E4%B8%8E%E9%83%A8%E7%BD%B2%EF%BC%89/"/>
    <id>http://yfzhou.coding.me/2018/08/07/Hexo-Next搭建个人博客（安装与部署）/</id>
    <published>2018-08-07T11:25:18.000Z</published>
    <updated>2018-08-08T02:05:03.685Z</updated>
    
    <content type="html"><![CDATA[<h1 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h1><p><a href="https://hexo.io/zh-cn/" target="_blank" rel="noopener">Hexo</a> 是一个快速、简洁且高效的静态站点生成框架，它基于 <a href="https://nodejs.org/en/" target="_blank" rel="noopener">Node.js</a> 。 它有以下特点：</p><ul><li><h6 id="超快速度"><a href="#超快速度" class="headerlink" title="  超快速度"></a><i class="fa fa-bolt"></i>  超快速度</h6><p><i>Node.js 所带来的超快生成速度，让上百个页面在几秒内瞬间完成渲染。</i></p></li><li><h6 id="支持Markdown"><a href="#支持Markdown" class="headerlink" title="  支持Markdown"></a><i class="fa fa-pencil"></i>  支持Markdown</h6><p> <i>Hexo 支持 GitHub Flavored Markdown 的所有功能，甚至可以整合 Octopress 的大多数插件。 </i></p></li><li><h6 id="一键部署"><a href="#一键部署" class="headerlink" title=" 一键部署"></a><i class="fa fa-cloud-upload"></i> 一键部署</h6> <i>只需一条指令即可部署到Github Pages，或其他网站 </i></li><li><h6 id="丰富的插件"><a href="#丰富的插件" class="headerlink" title=" 丰富的插件"></a><i class="fa fa-cog"></i> 丰富的插件</h6> <i>Hexo 拥有强大的插件系统，安装插件可以让 Hexo 支持 Jade, CoffeeScript。 </i></li></ul><a id="more"></a><p>通过 Hexo 你可以轻松地使用 Markdown 编写文章，除了 Markdown 本身的语法之外，还可以使用 Hexo 提供的 <a href="https://hexo.io/zh-cn/docs/tag-plugins.html" target="_blank" rel="noopener">标签插件</a> 来快速的插入特定形式的内容。</p><p>基于 Hexo 这个优秀的博客框架，很多优秀的开发者奉献出了它们基于 Hexo 开发的<a href="https://hexo.io/themes/" target="_blank" rel="noopener">主题</a>。<br><a href="http://theme-next.iissnan.com/" target="_blank" rel="noopener">NexT</a> 因其 精于心，简于形 的风格，一直被广大用户所喜爱。</p><h2 id="安装前提"><a href="#安装前提" class="headerlink" title="安装前提"></a><a href="#安装前提" title="安装前提"></a>安装前提</h2><p>安装 Hexo 相当简单。然而在安装前，您必须检查电脑中是否已安装下列应用程序:</p><blockquote><p><a href="https://nodejs.org/en/" target="_blank" rel="noopener">Node.js</a><br><a href="http://git-scm.com/" target="_blank" rel="noopener">Git</a></p></blockquote><p>如果您的电脑中已经安装上述必备程序，那么恭喜你！接下来只需要使用 npm 即可完成 Hexo 的安装。  </p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> npm install -g hexo-cli</span></span><br></pre></td></tr></table></figure><p>如果你的电脑中尚未安装所需要的程序，请根据以下安装指示完成安装。</p><blockquote><p><strong>Mac 用户</strong></p><p>您在编译时可能会遇到问题，请先到 App Store 安装 Xcode，Xcode 完成后，启动并进入 <strong>Preferences -&gt; Download -&gt; Command Line Tools -&gt; Install</strong> 安装命令行工具。</p></blockquote><h2 id="安装-Git"><a href="#安装-Git" class="headerlink" title="安装 Git"></a><a href="#安装-Git" title="安装 Git"></a>安装 Git</h2><ul><li>Windows：下载安装 git 。 <a href="https://git-scm.com/download/win" target="_blank" rel="noopener">Download Now</a></li><li>Mac：使用 <a href="http://mxcl.github.com/homebrew/" target="_blank" rel="noopener">Homebrew</a>，<a href="http://www.macports.org/" target="_blank" rel="noopener">MacPorts</a> 或下载 <a href="http://sourceforge.net/projects/git-osx-installer/" target="_blank" rel="noopener">安装程序</a> 安装</li><li>Linux（Ubuntu，Debian）：<code>sudo apt-get install git-core</code></li><li>Linux（Fedora，Red Hat，CentOS）：<code>sudo yum install git-core</code></li></ul><blockquote><p><strong>Windows 用户</strong></p><p>由于众所周知的原因，从上面的链接下载git for windows最好挂上一个代理，否则下载速度十分缓慢。也可以参考<a href="https://github.com/waylau/git-for-win" target="_blank" rel="noopener">这个页面</a>，收录了存储于百度云的下载地址。</p></blockquote><h2 id="安装-Node-js"><a href="#安装-Node-js" class="headerlink" title="安装 Node.js"></a><a href="#安装-Node-js" title="安装 Node.js"></a>安装 Node.js</h2><p>安装 Node.js 的最佳方式是使用 <a href="https://github.com/creationix/nvm" target="_blank" rel="noopener">nvm</a>。（nvm：Node Version Manager）<br>windows 下使用 nvm 请看这里： <a href="https://github.com/coreybutler/nvm-windows" target="_blank" rel="noopener">nvm-windows</a> ，首先需要下载安装 nvm 。 <a href="https://github.com/coreybutler/nvm-windows/releases" target="_blank" rel="noopener">Download Now</a><br>windows下安装完nvm以后，我们可以打开命令行中执行命令<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> nvm  </span></span><br><span class="line"><span class="meta">$</span><span class="bash"> nvm install latest</span></span><br></pre></td></tr></table></figure></p><p>执行完以后，重启命令行，执行命令 <code>node -v</code> ，如果出现版本号，那么 <code>Node.js</code> 就安装成功了。</p><p>如果没有安装成功，那可能就是墙的原因。建议下载 <code>Node.js</code> 直接安装。 <a href="https://nodejs.org/en/download/" target="_blank" rel="noopener">Download Now</a></p><h2 id="安装-Hexo"><a href="#安装-Hexo" class="headerlink" title="安装 Hexo"></a><a href="#安装-Hexo" title="安装 Hexo"></a>安装 Hexo</h2><p>有了 Node.js ，我们可以使用 npm 安装 Hexo。<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> npm install -g hexo-cli</span></span><br></pre></td></tr></table></figure></p><p>安装 Hexo 完成后，我们首先需要为我们的项目创建一个指定文件夹（例如我在 D 盘目录下创建了一个文件夹 blog 。<code>D:\blog</code> ），在指定文件夹中执行下列命令， Hexo 将会在指定文件夹中新建所需要的文件。<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> hexo init</span></span><br></pre></td></tr></table></figure></p><p>等待安装，安装完成后，指定文件夹 的目录如下：<br><figure class="highlight sqf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">.  </span><br><span class="line">├── <span class="variable">_config</span>.yml  </span><br><span class="line">├── package.json  </span><br><span class="line">├── scaffolds  </span><br><span class="line">├── source  </span><br><span class="line">|   ├── <span class="variable">_drafts</span>  </span><br><span class="line">|   └── <span class="variable">_posts</span>  </span><br><span class="line">└──</span><br></pre></td></tr></table></figure></p><p>我们继续执行命令  </p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> hexo g  </span></span><br><span class="line"><span class="meta">$</span><span class="bash"> hexo s --debug</span></span><br></pre></td></tr></table></figure><p>Hexo 将 source 文件夹中除 <em>posts 文件夹之外，开头命名为</em> (下划线)的文件 / 文件夹和隐藏的文件将会被忽略。Markdown 和 HTML 文件会被解析并放到 public 文件夹，而其他文件夹会被拷贝过去。<br>这个时候，我们在浏览器中访问 <a href="http://localhost:4000/" target="_blank" rel="noopener">http://localhost:4000/</a> ，就可以看到基于 Hexo 的默认主题的原型</p><h2 id="安装-NexT-主题"><a href="#安装-NexT-主题" class="headerlink" title="安装 NexT 主题"></a><a href="#安装-NexT-主题" title="安装 NexT 主题"></a>安装 NexT 主题</h2><h3 id="下载-NexT-主题"><a href="#下载-NexT-主题" class="headerlink" title="下载 NexT 主题"></a><a href="#下载-NexT-主题" title="下载 NexT 主题"></a>下载 NexT 主题</h3><p>依旧是在当前目录下，使用 Git checkout 代码：  </p><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git clone http<span class="variable">s:</span>//github.<span class="keyword">com</span>/iissnan/hexo-theme-<span class="keyword">next</span> themes/<span class="keyword">next</span></span><br></pre></td></tr></table></figure><p>等待下载完成。</p><p>在 Hexo 中有两份主要的配置文件，其名称都是 _config.yml 。其中，一份位于站点根目录下，主要包含 Hexo 本身的配置；另一份位于主题目录下，这份配置由主题作者提供，主要用于配置主题相关的选项。<br>我们约定，将前者称为 <span id="inline-blue">站点配置文件</span>，后者称为 <span id="inline-purple">主题配置文件</span></p><h3 id="启用-NexT-主题"><a href="#启用-NexT-主题" class="headerlink" title="启用 NexT 主题"></a><a href="#启用-NexT-主题" title="启用 NexT 主题"></a>启用 NexT 主题</h3><p>打开 <span id="inline-blue">站点配置文件</span>文件 ，找到 theme 字段，并将其值更改为 next 。<br>到此， NexT 主题安装完成。下一步我们将验证主题是否正确启用。在切换主题之后、验证之前，我们最好使用 <code>hexo clean</code> 来清除 Hexo 的缓存。</p><h3 id="验证主题"><a href="#验证主题" class="headerlink" title="验证主题"></a><a href="#验证主题" title="验证主题"></a>验证主题</h3><p>首先启动 Hexo 本地站点，并开启调试模式（即加上 <code>--debug</code>），整个命令是 <code>hexo s --debug</code>。在服务启动的过程，注意观察命令行输出是否有任何异常信息。当命令行输出中提示：</p><p>INFO  Hexo is running at <a href="http://0.0.0.0:4000/" target="_blank" rel="noopener">http://0.0.0.0:4000/</a>. Press Ctrl+C to stop.  </p><p>此时即可使用浏览器访问 <a href="http://localhost:4000/" target="_blank" rel="noopener">http://localhost:4000/</a> ，检查站点是否正确运行。</p><p>当你看到站点的外观与下图所示类似时即说明你已成功安装 NexT 主题。这是 NexT 默认的 Scheme —— Muse</p><p>现在，我们已经成功安装并启用了 NexT 主题。  </p><p>关于更多基本操作和基础知识，请查阅 <a href="https://hexo.io/zh-cn/" target="_blank" rel="noopener">Hexo</a> 与 <a href="http://theme-next.iissnan.com/" target="_blank" rel="noopener">NexT</a> 官方文档.</p><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a><a href="#总结" title="总结"></a>总结</h1><h2 id="本地调试步骤"><a href="#本地调试步骤" class="headerlink" title="本地调试步骤"></a><a href="#本地调试步骤" title="本地调试步骤"></a>本地调试步骤</h2><p>三部曲：  </p><blockquote><p>$ hexo clean<br>$ hexo g<br>$ hexo s –debug  </p></blockquote><p>这种带 debug 的运行，如果出现错误，可以在命令行中看到错误提示信息。</p><h2 id="部署步骤"><a href="#部署步骤" class="headerlink" title="部署步骤"></a><a href="#部署步骤" title="部署步骤"></a>部署步骤</h2><p>三部曲：  </p><blockquote><p>$ hexo clean<br>$ hexo g<br>$ hexo d  </p></blockquote><p>当然在部署之前，需要先配置好配置文件中的 deploy。</p><h2 id="常用命令"><a href="#常用命令" class="headerlink" title="常用命令"></a><a href="#常用命令" title="常用命令"></a>常用命令</h2><blockquote><p>$ hexo new “postName”  #新建文章<br>$ hexo new page “pageName” # 新建页面<br>$ hexo generate # 生成静态页面至public目录<br>$ hexo server # 开启预览访问端口(默认端口4000，’ctrl+c’关闭server)<br>$ hexo deploy # 项目部署<br>$ hexo help # 查看帮助<br>$ hexo version # 查看Hexo的版本  </p></blockquote><h2 id="简写命令"><a href="#简写命令" class="headerlink" title="简写命令"></a><a href="#简写命令" title="简写命令"></a>简写命令</h2><blockquote><p>$ hexo new == hexo n<br>$ hexo generate == hexo g<br>$ hexo server == hexo s<br>$ hexo deploy == hexo d<br>$ hexo generate + $ hexo server == $ hexo s -g<br>$ hexo generate + $ hexo deploy == $ hexo d -g</p></blockquote><h2 id="常见问题1"><a href="#常见问题1" class="headerlink" title="常见问题1"></a><a href="#常见问题1" title="常见问题1"></a>常见问题1</h2><p>在 hexo 的配置和设置文件中，在冒号后面没留空格会导致出问题：<br>错误的设置：<br><figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">author</span>:yufeng.Zhou</span><br><span class="line"><span class="attribute">email</span>:<span class="number">18851200889</span><span class="variable">@163</span>.com</span><br><span class="line"><span class="attribute">language</span>:zh-CN</span><br></pre></td></tr></table></figure></p><p>正确的设置：<br><figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">author</span>: yufeng.Zhou</span><br><span class="line"><span class="attribute">email</span>: <span class="number">18851200889</span><span class="variable">@163</span>.com</span><br><span class="line"><span class="attribute">language</span>: zh-CN</span><br></pre></td></tr></table></figure></p><h2 id="常见问题2"><a href="#常见问题2" class="headerlink" title="常见问题2"></a><a href="#常见问题2" title="常见问题2"></a>常见问题2</h2><p>关于 Git 提交中用户名和 Email 的设置<br><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git<span class="built_in"> config </span>--global user.name <span class="string">"Your name"</span>  </span><br><span class="line">git<span class="built_in"> config </span>--global user.email <span class="string">"Your email"</span></span><br></pre></td></tr></table></figure></p><h2 id="常见问题3"><a href="#常见问题3" class="headerlink" title="常见问题3"></a><a href="#常见问题3" title="常见问题3"></a>常见问题3</h2><p>Hexo 中的图标使用的是 <a href="http://fontawesome.io/" target="_blank" rel="noopener">Font Awesome</a> ，所以，我们的博客已经自带了 Font Awesome 中的所有图标，基本可以满足我们的所有需求，我们可以去 Font Awesome 中查找我们想要使用的图标。<br><i class="fa fa-github"></i><code>&lt;i class=&quot;fa fa-github&quot;&gt;&lt;/i&gt;</code><br><i class="fa fa-github fa-lg"></i><code>&lt;i class=&quot;fa fa-github fa-lg&quot;&gt;&lt;/i&gt;</code><br><i class="fa fa-github fa-2x"></i><code>&lt;i class=&quot;fa fa-github fa-2x&quot;&gt;&lt;/i&gt;</code></p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;简介&quot;&gt;&lt;a href=&quot;#简介&quot; class=&quot;headerlink&quot; title=&quot;简介&quot;&gt;&lt;/a&gt;简介&lt;/h1&gt;&lt;p&gt;&lt;a href=&quot;https://hexo.io/zh-cn/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Hexo&lt;/a&gt; 是一个快速、简洁且高效的静态站点生成框架，它基于 &lt;a href=&quot;https://nodejs.org/en/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Node.js&lt;/a&gt; 。 它有以下特点：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;h6 id=&quot;超快速度&quot;&gt;&lt;a href=&quot;#超快速度&quot; class=&quot;headerlink&quot; title=&quot;  超快速度&quot;&gt;&lt;/a&gt;&lt;i class=&quot;fa fa-bolt&quot;&gt;&lt;/i&gt;  超快速度&lt;/h6&gt;&lt;p&gt;&lt;i&gt;Node.js 所带来的超快生成速度，让上百个页面在几秒内瞬间完成渲染。&lt;/i&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;h6 id=&quot;支持Markdown&quot;&gt;&lt;a href=&quot;#支持Markdown&quot; class=&quot;headerlink&quot; title=&quot;  支持Markdown&quot;&gt;&lt;/a&gt;&lt;i class=&quot;fa fa-pencil&quot;&gt;&lt;/i&gt;  支持Markdown&lt;/h6&gt;&lt;p&gt; &lt;i&gt;Hexo 支持 GitHub Flavored Markdown 的所有功能，甚至可以整合 Octopress 的大多数插件。 &lt;/i&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;h6 id=&quot;一键部署&quot;&gt;&lt;a href=&quot;#一键部署&quot; class=&quot;headerlink&quot; title=&quot; 一键部署&quot;&gt;&lt;/a&gt;&lt;i class=&quot;fa fa-cloud-upload&quot;&gt;&lt;/i&gt; 一键部署&lt;/h6&gt; &lt;i&gt;只需一条指令即可部署到Github Pages，或其他网站 &lt;/i&gt;&lt;/li&gt;
&lt;li&gt;&lt;h6 id=&quot;丰富的插件&quot;&gt;&lt;a href=&quot;#丰富的插件&quot; class=&quot;headerlink&quot; title=&quot; 丰富的插件&quot;&gt;&lt;/a&gt;&lt;i class=&quot;fa fa-cog&quot;&gt;&lt;/i&gt; 丰富的插件&lt;/h6&gt; &lt;i&gt;Hexo 拥有强大的插件系统，安装插件可以让 Hexo 支持 Jade, CoffeeScript。 &lt;/i&gt;&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
      <category term="Hexo" scheme="http://yfzhou.coding.me/categories/Hexo/"/>
    
    
      <category term="Hexo" scheme="http://yfzhou.coding.me/tags/Hexo/"/>
    
      <category term="Next" scheme="http://yfzhou.coding.me/tags/Next/"/>
    
  </entry>
  
  <entry>
    <title>FreeMarker笔记</title>
    <link href="http://yfzhou.coding.me/2018/08/01/FreeMarker%E7%AC%94%E8%AE%B0/"/>
    <id>http://yfzhou.coding.me/2018/08/01/FreeMarker笔记/</id>
    <published>2018-08-01T01:24:56.000Z</published>
    <updated>2018-08-08T02:31:38.725Z</updated>
    
    <content type="html"><![CDATA[<h5 id="FreeMarker是一个很值得去学习的模版引擎。它是基于模板文件生成其他文本的通用工具。本章内容通过如何使用FreeMarker生成Html-web-页面-和-代码自动生成工具来快速了解FreeMarker。"><a href="#FreeMarker是一个很值得去学习的模版引擎。它是基于模板文件生成其他文本的通用工具。本章内容通过如何使用FreeMarker生成Html-web-页面-和-代码自动生成工具来快速了解FreeMarker。" class="headerlink" title="FreeMarker是一个很值得去学习的模版引擎。它是基于模板文件生成其他文本的通用工具。本章内容通过如何使用FreeMarker生成Html web 页面 和 代码自动生成工具来快速了解FreeMarker。"></a>FreeMarker是一个很值得去学习的模版引擎。它是基于模板文件生成其他文本的通用工具。本章内容通过如何使用FreeMarker生成Html web 页面 和 代码自动生成工具来快速了解FreeMarker。</h5><h3 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h3><p>FreeMarker是一款用java语言编写的模版引擎，它虽然不是web应用框架，但它很合适作为web应用框架的一个组件。</p><a id="more"></a><h5 id="特点"><a href="#特点" class="headerlink" title="特点"></a>特点</h5><ol><li>==轻量级==模版引擎，不需要Servlet环境就可以很轻松的嵌入到应用程序中</li><li>能生成各种文本，如html，xml，java，等</li><li>入门==简单==，它是用java编写的，很多语法和java相似</li></ol><h3 id="FreeMarker-程序"><a href="#FreeMarker-程序" class="headerlink" title="FreeMarker 程序"></a>FreeMarker 程序</h3><p>这里通过模拟简单的代码自动生产工具来感受第一个FreeMarker程序。</p><h6 id="项目目录结构"><a href="#项目目录结构" class="headerlink" title="项目目录结构"></a>项目目录结构</h6><p><img src="https://note.youdao.com/yws/api/personal/file/7F3E305ECC7C4D43B3723E432DABD9F5?method=download&amp;shareKey=871330817cb4fa023023ff95f9c3a3de" alt="image"></p><h6 id="eclipse安装freemarker插件"><a href="#eclipse安装freemarker插件" class="headerlink" title="eclipse安装freemarker插件"></a>eclipse安装freemarker插件</h6><blockquote><p>Help –&gt; Install New Software</p><p>点add，再出来的对话框中的Location中输入：<a href="http://download.jboss.org/jbosstools/updates/stable/indigo/" target="_blank" rel="noopener">http://download.jboss.org/jbosstools/updates/stable/indigo/</a></p><p>name随便取一个即可。然后会列出来所有可用的插件，<br>JBoss Application Development 下找到 FreeMarker IDE选中 点击Next </p><p>安装好重启eclipse就可以了。</p><p>过程可能有点慢，请==耐心等待==。</p></blockquote><h6 id="maven依赖"><a href="#maven依赖" class="headerlink" title="maven依赖"></a>maven依赖</h6><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.freemarker<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>freemarker<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">version</span>&gt;</span>2.3.23<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p>hello.ftl模板(部分)<br><img src="https://note.youdao.com/yws/api/personal/file/65DD084F98E647AB86F1D08C5440559F?method=download&amp;shareKey=78c42c5bd58a114675064cd0e0386924" alt="image"></p><p>FreeMarkerDemo.java 核心方法，使用 FreeMarker 模版引擎。</p><pre style="max-height: 35em;"><code>package com.freemarker.hello.templates;import java.io.BufferedWriter;import java.io.File;import java.io.FileOutputStream;import java.io.OutputStreamWriter;import java.io.Writer;import java.util.ArrayList;import java.util.Date;import java.util.HashMap;import java.util.List;import java.util.Map;import com.freemarker.hello.pojo.User;import freemarker.template.Configuration;import freemarker.template.Template;/** * 最常见的问题： java.io.FileNotFoundException: xxx does not exist. 解决方法：要有耐心 * FreeMarker jar 最新的版本（2.3.23）提示 Configuration 方法被弃用 代码自动生产基本原理： 数据填充 * freeMarker 占位符 */public class FreeMarkerDemo {    private static final String TEMPLATE_PATH = "src/main/java/com/freemarker/hello/templates";    private static final String CLASS_PATH = "src/main/java/com/freemarker/hello";    private static List<user> users = new ArrayList<user>();    static {        User u1 = new User("1", 22, "迟到峰");        User u2 = new User("2", 23, "要饭楚");        User u3 = new User("3", 27, "BUG李");        User u4 = new User("4", 25, "删库冬");        User u5 = new User("5", 29, "瓜子军");        User u6 = new User("6", 28, "老韩");        User u7 = new User(null, 25, null);        users.add(u1);        users.add(u2);        users.add(u3);        users.add(u4);        users.add(u5);//        users.add(null);        users.add(u6);//        users.add(u7);//        users.clear();    }    public static void main(String[] args) {        // step1 创建freeMarker配置实例        Configuration configuration = new Configuration(Configuration.VERSION_2_3_23);        Writer out = null;        try {            // step2 获取模版路径            configuration.setDirectoryForTemplateLoading(new File(TEMPLATE_PATH));            // step3 创建数据模型            Map<string, object=""> dataMap = new HashMap<string, object="">();            dataMap.put("classPath", "com.freemarker.hello");            dataMap.put("htmlName", "使用FreeMarker生成html模板");            dataMap.put("helloWorld", "通过简单的 <代码自动生产程序> 演示 FreeMarker的HelloWorld！");            dataMap.put("author", "周宇峰");            dataMap.put("github", "github.com/542869246");            dataMap.put("name", "abcdefg");            dataMap.put("dateTime",new Date());            dataMap.put("users", users);            // step4 加载模版文件            Template template = configuration.getTemplate("hello.ftl");            // step5 生成数据            File docFile = new File(CLASS_PATH + "\\" + "hello.html");            out = new BufferedWriter(new OutputStreamWriter(new FileOutputStream(docFile)));            // step6 输出文件            template.process(dataMap, out);            System.out.println("文件创建成功 !");        } catch (Exception e) {            e.printStackTrace();        } finally {            try {                if (null != out) {                    out.flush();                }            } catch (Exception e2) {                e2.printStackTrace();            }        }    }}</代码自动生产程序></string,></string,></user></user></code></pre><p>运行程序后刷新项目，会发现多了一个hello.html文件。</p><h2 id="语法详解"><a href="#语法详解" class="headerlink" title="语法详解"></a>语法详解</h2><h3 id="数据类型"><a href="#数据类型" class="headerlink" title="数据类型"></a>数据类型</h3><h6 id="和java不同，FreeMarker不需要定义变量的类型，直接赋值即可。"><a href="#和java不同，FreeMarker不需要定义变量的类型，直接赋值即可。" class="headerlink" title="和java不同，FreeMarker不需要定义变量的类型，直接赋值即可。"></a>和java不同，FreeMarker不需要定义变量的类型，直接赋值即可。</h6><p>字符串： value = “xxxx” 。 单引号和双引号是一样的。字符串中可以使用转义字符”\”。如果字符串内有大量的特殊字符，则可以在引号的前面加上一个字母r，则字符串内的所有字符都将直接输出。string = r”xxxx”。</p><p>数值：value = 1.2。数值可以直接等于，但是不能用科学计数法。</p><p>布尔值：true or false。</p><p>List集合：list = [1,2,3] ; list=[1..100] 表示 1 到 100 的集合，反之亦然。</p><p>Map集合：map = {“key” : “value” , “key2” : “value2”}，key 必须是字符串</p><p>时间对象:</p><figure class="highlight arduino"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">root.<span class="built_in">put</span>(<span class="string">"date1"</span>,<span class="keyword">new</span> Date());</span><br><span class="line">$&#123;date1?<span class="keyword">string</span>(<span class="string">"yyyy-MM-dd HH:mm:ss"</span>)&#125;</span><br></pre></td></tr></table></figure><p>JaveBean：Freemarker中对于javabean的处理跟EL表达式一致，类型可自动转化！非常方便！</p><h6 id="注释：-lt-–-abcd-–-gt"><a href="#注释：-lt-–-abcd-–-gt" class="headerlink" title="注释：&lt;#– abcd –&gt;"></a>注释：&lt;#– abcd –&gt;</h6><h3 id="字符串操作"><a href="#字符串操作" class="headerlink" title="字符串操作"></a>字符串操作</h3><h6 id="声明变量和输出"><a href="#声明变量和输出" class="headerlink" title="声明变量和输出:"></a>声明变量和输出:</h6><figure class="highlight d"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;#assign name=<span class="string">"zyf"</span>&gt;         <span class="comment">//声明一个变量值为zyf的变量name</span></span><br><span class="line">$&#123;name&#125;                      <span class="comment">//输出name  结果为zyf</span></span><br><span class="line">&lt;#assign cname=<span class="string">r"特殊字符完成输出(https://github.com/542869246)"</span>&gt;</span><br><span class="line">$&#123;cname&#125;</span><br></pre></td></tr></table></figure><h5 id="字符串连接："><a href="#字符串连接：" class="headerlink" title="字符串连接："></a>字符串连接：</h5><figure class="highlight gams"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//使用嵌套或者+ 进行字符串连接操作</span></span><br><span class="line"><span class="symbol">$</span>&#123;<span class="string">"Hello $&#123;name&#125; !"</span>&#125; / <span class="symbol">$</span>&#123;<span class="string">"Hello "</span> + name + <span class="string">" !"</span>&#125;</span><br><span class="line"><span class="comment">//输出：Hello zyf ! / Hello zyf !</span></span><br></pre></td></tr></table></figure><h5 id="字符串截取："><a href="#字符串截取：" class="headerlink" title="字符串截取："></a>字符串截取：</h5><figure class="highlight lsl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;#assign a=<span class="string">"abcdefg"</span>&gt;</span><br><span class="line">$&#123;a[<span class="number">1</span>]&#125;                     <span class="comment">//b</span></span><br><span class="line">$&#123;a[<span class="number">1.</span><span class="number">.5</span>]&#125;                  <span class="comment">//bcdef</span></span><br><span class="line">$&#123;a?substring(<span class="number">3</span>)&#125;           <span class="comment">//efg</span></span><br><span class="line">$&#123;a?substring(<span class="number">3</span>,<span class="number">2</span>)&#125;         <span class="comment">//ef</span></span><br></pre></td></tr></table></figure><blockquote><p>string[index]。index 可以是一个值，也可以是形如 0..2 表示下标从0开始，到下标为2结束。一共是三个数。</p><p>substring（start,end）从一个字符串中截取子串。</p><p>start:截取子串开始的索引，start必须大于等于0，小于等于end。</p><p>end: 截取子串的长度，end必须大于等于0，小于等于字符串长度，如果省略该参数，默认为字符串长度。</p></blockquote><h3 id="算数运算："><a href="#算数运算：" class="headerlink" title="算数运算："></a>算数运算：</h3><p>支持”+”、”－”、”*”、”/“、”%”运算符</p><figure class="highlight gcode"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&lt;<span class="attr">#assign number1</span>=<span class="number">10</span> <span class="symbol">number2</span>=<span class="number">5</span> &gt;</span><br><span class="line"><span class="string">"+"</span>:$&#123;<span class="symbol">number1</span> + <span class="symbol">number2</span> &#125;       <span class="comment">//15</span></span><br><span class="line"><span class="string">"-"</span>:$&#123;<span class="symbol">number1</span> - <span class="symbol">number2</span> &#125;       <span class="comment">//5</span></span><br><span class="line"><span class="string">"*"</span>:$&#123;<span class="symbol">number1</span> * <span class="symbol">number2</span> &#125;       <span class="comment">//50</span></span><br><span class="line"><span class="string">"/"</span>:$&#123;<span class="symbol">number1</span> / <span class="symbol">number2</span> &#125;       <span class="comment">//2</span></span><br><span class="line"><span class="string">"%"</span>:$&#123;<span class="symbol">number1</span> <span class="meta">%</span> <span class="symbol">number2</span> &#125;       <span class="comment">//0</span></span><br></pre></td></tr></table></figure><h3 id="比较运算符"><a href="#比较运算符" class="headerlink" title="比较运算符"></a>比较运算符</h3><p>表达式中支持的比较运算符有如下几种：</p><ol><li>=（或者==）：判断两个值是否相等；</li><li>!=：判断两个值是否不相等；<br>注： =和!=可以用作字符串、数值和日期的比较，但两边的数据类型必须相同。而且FreeMarker的比较是精确比较，==不会忽略大小写及空格==。</li><li>>（或者gt）：大于</li><li>>=（或者gte）：大于等于</li><li>&lt;（或者lt）：小于</li><li>&lt;=（或者lte）：小于等于</li><li><figure class="highlight gcode"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;<span class="attr">#if number1</span> + <span class="symbol">number2</span> gte <span class="number">12</span> || <span class="symbol">number1</span> - <span class="symbol">number2</span> <span class="keyword">lt</span> <span class="number">6</span>&gt;</span><br><span class="line"><span class="string">"*"</span> : $&#123;<span class="symbol">number1</span> * <span class="symbol">number2</span>&#125;</span><br><span class="line">&lt;<span class="attr">#else&gt;</span></span><br><span class="line"><span class="attr">"/" : $&#123;number1</span> / <span class="symbol">number2</span>&#125;</span><br><span class="line">&lt;/<span class="attr">#if&gt;</span></span><br></pre></td></tr></table></figure></li></ol><blockquote><p>上面这些比较运算符可以用于数字和日期，但不能用于字符串。大部分时候，使用==gt比&gt;有更好的效果==，因为FreeMarker会把&gt;解释成标签的结束字符。可以使用括号来避免这种情况，如：&lt;#if (x&gt;y)&gt;。</p></blockquote><h3 id="逻辑运算符"><a href="#逻辑运算符" class="headerlink" title="逻辑运算符"></a>逻辑运算符</h3><ol><li>&amp;&amp;：逻辑与；</li><li>||：逻辑或；</li><li>!：逻辑非<blockquote><p>逻辑运算符只能用于布尔值。</p></blockquote></li></ol><h3 id="内建函数"><a href="#内建函数" class="headerlink" title="内建函数"></a>内建函数</h3><blockquote><p>FreeMarker还提供了一些内建函数来转换输出,可以在任何变量后紧跟?,?后紧跟内建函数,就可以通过内建函数来轮换输出变量.下面是常用的内建的字符串函数</p></blockquote><h5 id="字符串相关常用的内建函数："><a href="#字符串相关常用的内建函数：" class="headerlink" title="字符串相关常用的内建函数："></a>字符串相关常用的内建函数：</h5><figure class="highlight stata"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">&lt;#assign data = <span class="string">"abcd1234"</span>&gt;</span><br><span class="line">html：对字符串进行HTML编码，将字符串中的&lt;、&gt;、&amp;和“替换为对应得&amp;lt;&amp;gt;&amp;quot:&amp;amp</span><br><span class="line"></span><br><span class="line">cap_first：使字符串第一个字母大写 <span class="variable">$&#123;data</span>?cap_first&#125;</span><br><span class="line"></span><br><span class="line">lower_case：将字符串转成小写 <span class="variable">$&#123;data</span>?lower_case&#125;</span><br><span class="line"></span><br><span class="line">upper_case：将字符串转成大写 <span class="variable">$&#123;data</span>?upper_case&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">trim</span>:去掉字符串前后的空白字符 <span class="variable">$&#123;data</span>?<span class="keyword">trim</span>&#125;</span><br><span class="line"></span><br><span class="line">length:返回字符串的长度 $&#123;<span class="string">"string"</span>?length&#125;</span><br><span class="line"></span><br><span class="line">index_of(substring,start)在字符串中查找某个子串，返回找到子串的第一个字符的索引，如果没有找到子串，则返回-1。</span><br><span class="line">Start参数用于指定从字符串的那个索引处开始搜索，start为数字值。</span><br><span class="line">如果start大于字符串长度，则start取值等于字符串长度，如果start小于0， 则start取值为0。</span><br><span class="line">$&#123;<span class="string">"string"</span>?index_of(<span class="string">"in"</span>) 结果为3</span><br><span class="line">$&#123;<span class="string">"string"</span>?index_of(<span class="string">"ab"</span>) 结果为-1</span><br><span class="line"></span><br><span class="line"><span class="keyword">replace</span>用于将字符串中的一部分从左到右替换为另外的字符串。</span><br><span class="line">$&#123;<span class="string">"strabg"</span>?<span class="keyword">replace</span>(<span class="string">"ab"</span>,<span class="string">"in"</span>)&#125; 结果为<span class="built_in">string</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">split</span>使用指定的分隔符将一个字符串拆分为一组字符串</span><br><span class="line">&lt;#<span class="keyword">list</span> <span class="string">"This|is|split"</span>?<span class="keyword">split</span>(<span class="string">"|"</span>") <span class="keyword">as</span> s&gt;</span><br><span class="line"><span class="variable">$&#123;s&#125;</span></span><br><span class="line">&lt;/#<span class="keyword">list</span>&gt;</span><br><span class="line">结果为:</span><br><span class="line">This</span><br><span class="line">is</span><br><span class="line"><span class="keyword">split</span></span><br></pre></td></tr></table></figure><h5 id="集合相关常用的内建函数："><a href="#集合相关常用的内建函数：" class="headerlink" title="集合相关常用的内建函数："></a>集合相关常用的内建函数：</h5><figure class="highlight arduino"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">size</span>：获得集合中元素的个数 $&#123;users?<span class="built_in">size</span>&#125;</span><br></pre></td></tr></table></figure><h5 id="数字值相关常用的内建函数："><a href="#数字值相关常用的内建函数：" class="headerlink" title="数字值相关常用的内建函数："></a>数字值相关常用的内建函数：</h5><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&lt;<span class="meta">#assign floatData = 12.34&gt;</span></span><br><span class="line"><span class="keyword">int</span>：取得数字的整数部分 $&#123;floatData?<span class="keyword">int</span>&#125;</span><br></pre></td></tr></table></figure><h3 id="三元运算符"><a href="#三元运算符" class="headerlink" title="三元运算符"></a>三元运算符</h3><figure class="highlight lasso"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$&#123;(users?size <span class="literal">gt</span> <span class="number">15</span>)?<span class="built_in">string</span>(<span class="string">'a'</span>,<span class="string">'b'</span>) &#125;</span><br><span class="line">&lt;#assign theValue = (temp == <span class="string">"default"</span>)?<span class="built_in">string</span>(<span class="string">'true'</span>,<span class="string">'false'</span>) /&gt;</span><br></pre></td></tr></table></figure><h3 id="空值处理运算符"><a href="#空值处理运算符" class="headerlink" title="空值处理运算符"></a>空值处理运算符</h3><blockquote><p>FreeMarker对空值的处理非常严格,==FreeMarker的变量必须有值==,没有被赋值的变量就会抛出异常,因为FreeMarker未赋值的变量强制出错可以杜绝很多潜在的错误,如缺失潜在的变量命名,或者其他变量错误.这里所说的空值,实际上也包括那些并不存在的变量,对于一个Java的 null值而言,我们认为这个变量是存在的,只是它的值为null,但对于FreeMarker模板而言,它无法理解null值,null值和不存在的变量完全相同。</p></blockquote><h6 id="FreeMarker提供两个运算符来避免空值"><a href="#FreeMarker提供两个运算符来避免空值" class="headerlink" title="FreeMarker提供两个运算符来避免空值"></a>FreeMarker提供两个运算符来避免空值</h6><ol><li>!：指定缺失变量的默认值</li><li>??：判断变量是否存在</li></ol><blockquote><p>!运算符有两种用法：variable!或variable!defaultValue。第一种用法不给变量指定默认值，表明默认值是空字符串、长度为0的集合、或长度为0的Map对象。==使用!运算符指定默认值并不要求默认值的类型和变量类型相同==。</p><p>??运算符返回布尔值，如：variable??，如果变量存在，返回true，否则返回false。</p></blockquote><figure class="highlight sqf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;<span class="meta">#<span class="meta-keyword">if</span> user??&gt;</span></span><br><span class="line">    $&#123;user.<span class="built_in">name</span>!<span class="string">"变量为空则给一个默认值"</span>&#125;</span><br><span class="line">&lt;<span class="meta">#<span class="meta-keyword">else</span>&gt;</span></span><br><span class="line">    users为空</span><br><span class="line">&lt;/<span class="meta">#<span class="meta-keyword">if</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="常用指令"><a href="#常用指令" class="headerlink" title="常用指令"></a>常用指令</h3><blockquote><p>FreeMarker的FTL指令也是模板的重要组成部分,这些指令可实现对数据模型所包含数据的抚今迭代,分支控制.除此之外,还有一些重要的功能,也是通过FTL指令来实现的. </p></blockquote><h4 id="if指令"><a href="#if指令" class="headerlink" title="if指令"></a>if指令</h4><blockquote><p>这是一个典型的分支控制指令,该指令的作用完全类似于Java语言中的if,if指令的语法格式如下<br><figure class="highlight monkey"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&lt;<span class="meta">#assign age=23&gt; </span></span><br><span class="line">&lt;<span class="meta">#<span class="meta-keyword">if</span> (age&gt;60)&gt;老年人 </span></span><br><span class="line">&lt;<span class="meta">#<span class="meta-keyword">elseif</span> (age&gt;40)&gt;中年人 </span></span><br><span class="line">&lt;<span class="meta">#<span class="meta-keyword">elseif</span> (age&gt;20)&gt;青年人 </span></span><br><span class="line">&lt;<span class="meta">#<span class="meta-keyword">else</span>&gt; 少年人 </span></span><br><span class="line">&lt;/<span class="meta">#<span class="meta-keyword">if</span>&gt;</span></span><br></pre></td></tr></table></figure></p></blockquote><h4 id="switch-case指令"><a href="#switch-case指令" class="headerlink" title="switch case指令"></a>switch case指令</h4><blockquote><p>switch（expr）,其中expr只能是字符串、基本类型int或者包装类Integer，也包括不同的长度整型，例如short<br><figure class="highlight applescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">&lt;<span class="comment">#switch being.size&gt;  </span></span><br><span class="line">  &lt;<span class="comment">#case "small"&gt;  </span></span><br><span class="line">          This will be processed <span class="keyword">if</span> <span class="keyword">it</span> <span class="keyword">is</span> small  </span><br><span class="line">          &lt;<span class="comment">#break&gt;  </span></span><br><span class="line">  &lt;<span class="comment">#case "medium"&gt;  </span></span><br><span class="line">          This will be processed <span class="keyword">if</span> <span class="keyword">it</span> <span class="keyword">is</span> medium  </span><br><span class="line">          &lt;<span class="comment">#break&gt;  </span></span><br><span class="line">  &lt;<span class="comment">#case "large"&gt;  </span></span><br><span class="line">          This will be processed <span class="keyword">if</span> <span class="keyword">it</span> <span class="keyword">is</span> large  </span><br><span class="line">          &lt;<span class="comment">#break&gt;  </span></span><br><span class="line">  &lt;<span class="comment">#default&gt;  </span></span><br><span class="line">          This will be processed <span class="keyword">if</span> <span class="keyword">it</span> <span class="keyword">is</span> neither  </span><br><span class="line">&lt;/<span class="comment">#switch&gt;</span></span><br></pre></td></tr></table></figure></p></blockquote><h4 id="list指令"><a href="#list指令" class="headerlink" title="list指令"></a>list指令</h4><blockquote><p>list指令是一个迭代输出指令,用于迭代输出数据模型中的集合<br>sequence是集合(collection)的表达式，item是循环变量的名字，不能是表达式。<br>当在遍历sequence时，会将遍历变量的值保存到item中</p></blockquote><figure class="highlight stata"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//格式</span></span><br><span class="line">&lt;#<span class="keyword">list</span> sequence <span class="keyword">as</span> item&gt;    </span><br><span class="line">  <span class="variable">$&#123;item&#125;</span>   </span><br><span class="line">&lt;/#<span class="keyword">list</span>&gt;</span><br><span class="line"></span><br><span class="line"><span class="comment">//遍历users集合 获取user对象属性</span></span><br><span class="line">&lt;#<span class="keyword">list</span> users <span class="keyword">as</span> user&gt;    </span><br><span class="line">  <span class="variable">$&#123;user</span>.id&#125;--<span class="variable">$&#123;user</span>.age&#125;--&#123;user.name&#125;</span><br><span class="line">&lt;/#<span class="keyword">list</span>&gt;</span><br></pre></td></tr></table></figure><h6 id="List指令还隐含了两个循环变量："><a href="#List指令还隐含了两个循环变量：" class="headerlink" title="List指令还隐含了两个循环变量："></a>List指令还隐含了两个循环变量：</h6><p>item_index:当前迭代项在所有迭代项中的位置，是数字值。</p><p>item_has_next:用于判断当前迭代项是否是所有迭代项中的最后一项。</p><figure class="highlight dust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">#list</span> <span class="attr">users</span> <span class="attr">as</span> <span class="attr">user</span>&gt;</span>    </span></span><br><span class="line"><span class="xml">  $</span><span class="template-variable">&#123;user_index&#125;</span><span class="xml">--$</span><span class="template-variable">&#123;user.id&#125;</span><span class="xml">--$</span><span class="template-variable">&#123;user.age&#125;</span><span class="xml">--</span><span class="template-variable">&#123;user.name&#125;</span><span class="xml"></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;<span class="name">#if</span> !<span class="attr">user_has_next</span>&gt;</span></span></span><br><span class="line"><span class="xml">        共有$</span><span class="template-variable">&#123;users?size&#125;</span><span class="xml">最后一个用户是:$</span><span class="template-variable">&#123;user.name&#125;</span><span class="xml"></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;/<span class="name">#if</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;/<span class="name">#list</span>&gt;</span></span></span><br></pre></td></tr></table></figure><h6 id="对List进行排序"><a href="#对List进行排序" class="headerlink" title="对List进行排序"></a>对List进行排序</h6><blockquote><p>通常我们的排序操作都是通过DAO层来实现的，如果我们想随时更改我们的排序，那么就必须修改我们的DAO层代码，确实不方便。但Freemarker为我们提供了这样的排序方法，解决了这个问题。</p></blockquote><ol><li>sort升序排序函数<br>sort对序列(sequence)进行排序，要求序列中的变量必须是：字符串（按首字母排序）,数字，日期值。</li></ol><figure class="highlight stata"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;#<span class="keyword">list</span> <span class="keyword">list</span>?<span class="keyword">sort</span> <span class="keyword">as</span> <span class="keyword">l</span>&gt;…&lt;/#<span class="keyword">list</span>&gt;</span><br></pre></td></tr></table></figure><ol start="2"><li>sort_by函数<br>sort_by有一个参数,该参数用于指定想要排序的子变量，排序是按照变量对应的值进行排序,如：</li></ol><figure class="highlight clean"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;#list users?sort_by(<span class="string">"age"</span>) <span class="keyword">as</span> user&gt;…&lt;/#list&gt;</span><br></pre></td></tr></table></figure><p>age是User对象的属性，排序是按age的值进行的。</p><ol start="3"><li>reverse降序排序函数</li></ol><figure class="highlight ocaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;#<span class="built_in">list</span> <span class="built_in">list</span>? reverse <span class="keyword">as</span> l&gt;…&lt;/#<span class="built_in">list</span>&gt;。</span><br></pre></td></tr></table></figure><p>reverse使用同sort相同。reverse还可以同sort_by一起使用<br>如：想让用户按年龄降序排序，那么可以这个样写</p><figure class="highlight clean"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;#list users?sort_by(<span class="string">"age"</span>)?reverse <span class="keyword">as</span> user&gt;…&lt;/#list&gt;</span><br></pre></td></tr></table></figure><h5 id="使用list指令遍历map"><a href="#使用list指令遍历map" class="headerlink" title="使用list指令遍历map"></a>使用list指令遍历map</h5><figure class="highlight stata"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//创建一个map,注意在freemarker中,map的key只能是字符串来作为key</span></span><br><span class="line">&lt;#assign userMap=&#123;<span class="string">"1"</span>,<span class="string">"刘德华"</span>,<span class="string">"2"</span>:<span class="string">"张学友"</span>&#125;/&gt;</span><br><span class="line"></span><br><span class="line"><span class="comment">//获取map中的值</span></span><br><span class="line"><span class="variable">$&#123;userMap</span>[<span class="string">"1"</span>]&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//获取map的keys</span></span><br><span class="line">&lt;#assign  keys=userMap?keys/&gt;</span><br><span class="line"></span><br><span class="line"><span class="comment">//遍历map 首选获取key的集合</span></span><br><span class="line">&lt;#<span class="keyword">list</span> keys <span class="keyword">as</span> key&gt;</span><br><span class="line">  key:<span class="variable">$&#123;key&#125;</span>-value:<span class="variable">$&#123;userMap</span>[<span class="string">"$&#123;key&#125;"</span>]&#125;</span><br><span class="line">&lt;/#<span class="keyword">list</span>&gt;</span><br><span class="line"></span><br><span class="line"><span class="comment">//直接遍历map的第二种方式</span></span><br><span class="line">&lt;#<span class="keyword">list</span> userMap?keys <span class="keyword">as</span> key&gt;</span><br><span class="line">  key:<span class="variable">$&#123;key&#125;</span>--value:<span class="variable">$&#123;userMap</span>[<span class="string">"$&#123;key&#125;"</span>]&#125;</span><br><span class="line">&lt;/#<span class="keyword">list</span>&gt;</span><br><span class="line"></span><br><span class="line"><span class="comment">//直接遍历map的values</span></span><br><span class="line">&lt;#<span class="keyword">list</span> userMap?values <span class="keyword">as</span> value&gt;</span><br><span class="line"> <span class="variable">$&#123;value&#125;</span></span><br><span class="line">&lt;/#<span class="keyword">list</span>&gt;</span><br></pre></td></tr></table></figure><h4 id="include指令"><a href="#include指令" class="headerlink" title="include指令"></a>include指令</h4><blockquote><p>include指令的作用类似于JSP的包含指令,用于包含指定页</p></blockquote><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">现在有hello.ftl、inc1.ftl与inc2<span class="selector-class">.ftl</span> <span class="number">3</span>个模板</span><br><span class="line">在inc1.ftl与inc2.ftl中的内容分别是:</span><br><span class="line">&lt;<span class="selector-id">#assign</span> username=<span class="string">"刘德华"</span>&gt;与&lt;<span class="selector-id">#assign</span> username=<span class="string">"张学友"</span>&gt;</span><br><span class="line"></span><br><span class="line">接着在hello.ftl模版中用include将inc1.ftl包含进来</span><br><span class="line">&lt;<span class="selector-id">#include</span> <span class="string">"/inc/inc1.ftl"</span>&gt;</span><br><span class="line">$&#123;username&#125;</span><br><span class="line">此刻获取的结果是:刘德华</span><br><span class="line"></span><br><span class="line">接着我们在hello.ftl用include将inc1.ftl与inc2.ftl同时进行包含进来</span><br><span class="line"></span><br><span class="line">&lt;<span class="selector-id">#include</span> <span class="string">"/inc/inc1.ftl"</span>&gt;</span><br><span class="line">&lt;<span class="selector-id">#include</span> <span class="string">"/inc/inc2.ftl"</span>&gt;</span><br><span class="line">$&#123;username&#125;</span><br><span class="line"></span><br><span class="line">此刻获取的值是:张学友</span><br></pre></td></tr></table></figure><h6 id="总结：出现这种情况，在-两个模版中都分别存在变量名都相同的变量的时候，include包含进来，会进行覆盖-，include只时候将其公共的静态文件进行包含，而里面不涉及到内部函数以及变量声明之类的，当涉及到这种问题，我们就要用import进行导入"><a href="#总结：出现这种情况，在-两个模版中都分别存在变量名都相同的变量的时候，include包含进来，会进行覆盖-，include只时候将其公共的静态文件进行包含，而里面不涉及到内部函数以及变量声明之类的，当涉及到这种问题，我们就要用import进行导入" class="headerlink" title="总结：出现这种情况，在==两个模版中都分别存在变量名都相同的变量的时候，include包含进来，会进行覆盖==，include只时候将其公共的静态文件进行包含，而里面不涉及到内部函数以及变量声明之类的，当涉及到这种问题，我们就要用import进行导入"></a>总结：出现这种情况，在==两个模版中都分别存在变量名都相同的变量的时候，include包含进来，会进行覆盖==，include只时候将其公共的静态文件进行包含，而里面不涉及到内部函数以及变量声明之类的，当涉及到这种问题，我们就要用import进行导入</h6><h4 id="import指令"><a href="#import指令" class="headerlink" title="import指令"></a>import指令</h4><blockquote><p>该指令用于导入FreeMarker模板中的所有变量,并将该变量放置在指定的Map对象中</p></blockquote><figure class="highlight xl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">接着上面</span><br><span class="line">在hello.ftl用<span class="keyword">import</span>指令将inc1.ftl与inc2.ftll模板文件中的所有变量,同时导入进来</span><br><span class="line">&lt;#<span class="keyword">import</span> <span class="string">"/inc/inc1.ftl"</span> <span class="keyword">as</span> inc1&gt;</span><br><span class="line">&lt;#<span class="keyword">import</span> <span class="string">"/inc/inc2.ftl"</span> <span class="keyword">as</span> inc2&gt;</span><br><span class="line"></span><br><span class="line">$&#123;inc1.username&#125;    <span class="comment">//刘德华</span></span><br><span class="line">$&#123;inc2.username&#125;    <span class="comment">//张学友</span></span><br></pre></td></tr></table></figure><h4 id="noparse指令"><a href="#noparse指令" class="headerlink" title="noparse指令"></a>noparse指令</h4><blockquote><p>noparse指令指定FreeMarker不处理该指定里包含的内容,该指令的语法格式如下</p></blockquote><figure class="highlight dust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">#noparse</span>&gt;</span>...<span class="tag">&lt;/<span class="name">#noparse</span>&gt;</span></span></span><br><span class="line"><span class="xml"></span></span><br><span class="line"><span class="xml">看如下的例子: </span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">#noparse</span>&gt;</span> </span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">#list</span> <span class="attr">books</span> <span class="attr">as</span> <span class="attr">book</span>&gt;</span> </span></span><br><span class="line"><span class="xml">   <span class="tag">&lt;<span class="name">tr</span>&gt;</span><span class="tag">&lt;<span class="name">td</span>&gt;</span>$</span><span class="template-variable">&#123;book.name&#125;</span><span class="xml"><span class="tag">&lt;<span class="name">td</span>&gt;</span>作者:$</span><span class="template-variable">&#123;book.author&#125;</span><span class="xml"> </span></span><br><span class="line"><span class="xml"><span class="tag">&lt;/<span class="name">#list</span>&gt;</span> </span></span><br><span class="line"><span class="xml"><span class="tag">&lt;/<span class="name">#noparse</span>&gt;</span> </span></span><br><span class="line"><span class="xml">输出如下: </span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">#list</span> <span class="attr">books</span> <span class="attr">as</span> <span class="attr">book</span>&gt;</span> </span></span><br><span class="line"><span class="xml">   <span class="tag">&lt;<span class="name">tr</span>&gt;</span><span class="tag">&lt;<span class="name">td</span>&gt;</span>$</span><span class="template-variable">&#123;book.name&#125;</span><span class="xml"><span class="tag">&lt;<span class="name">td</span>&gt;</span>作者:$</span><span class="template-variable">&#123;book.author&#125;</span><span class="xml"> </span></span><br><span class="line"><span class="xml"><span class="tag">&lt;/<span class="name">#list</span>&gt;</span></span></span><br></pre></td></tr></table></figure><h4 id="assign指令"><a href="#assign指令" class="headerlink" title="assign指令"></a>assign指令</h4><blockquote><p>assign指令在前面已经使用了多次,它用于为该模板页面创建或替换一个顶层变量,assign指令的用法有多种,包含创建或替换一个顶层变量, 或者创建或替换多个变量等,它的最简单的语法如下:&lt;#assign name=value [in namespacehash]&gt;,这个用法用于指定一个名为name的变量,该变量的值为value,此外,FreeMarker允许在使用 assign指令里增加in子句,in子句用于将创建的name变量放入namespacehash命名空间中</p><p>assign指令还有如下用法:</p></blockquote><figure class="highlight clean"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">&lt;#assign name1=value1 name2=value2 ... nameN=valueN [<span class="keyword">in</span> namespacehash]&gt;</span><br><span class="line">这个语法可以同时创建或替换多个顶层变量,此外,还有一种复杂的用法,如果需要创建或替换的变量值是一个复杂的表达式,则可以使用如下语法格式:</span><br><span class="line">&lt;#assign name [<span class="keyword">in</span> namespacehash]&gt;capture this&lt;/#assign&gt;</span><br><span class="line">在这个语法中,是指将assign指令的内容赋值给name变量.如下例子:</span><br><span class="line">&lt;#assign x&gt; </span><br><span class="line">&lt;#list [<span class="string">"星期一"</span>, <span class="string">"星期二"</span>, <span class="string">"星期三"</span>, <span class="string">"星期四"</span>, <span class="string">"星期五"</span>, <span class="string">"星期六"</span>, <span class="string">"星期天"</span>] <span class="keyword">as</span> n&gt; </span><br><span class="line">$&#123;n&#125; </span><br><span class="line">&lt;/#list&gt; </span><br><span class="line">&lt;/#assign&gt; </span><br><span class="line">$&#123;x&#125; </span><br><span class="line">上面的代码将产生如下输出:星期一 星期二 星期三 星期四 星期五 星期六 星期天</span><br></pre></td></tr></table></figure><h6 id="虽然assign指定了这种复杂变量值的用法-但是我们也不要滥用这种用法-如下例子"><a href="#虽然assign指定了这种复杂变量值的用法-但是我们也不要滥用这种用法-如下例子" class="headerlink" title="虽然assign指定了这种复杂变量值的用法,但是我们也不要滥用这种用法,如下例子:"></a>虽然assign指定了这种复杂变量值的用法,但是我们也不要滥用这种用法,如下例子:</h6><figure class="highlight dust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">#assign</span> <span class="attr">x</span>&gt;</span>Hello $</span><span class="template-variable">&#123;user&#125;</span><span class="xml">!<span class="tag">&lt;/<span class="name">#assign</span>&gt;</span></span></span><br><span class="line"><span class="xml">以上代码改为如下写法更合适:</span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">#assign</span> <span class="attr">x</span>=<span class="string">"Hello $</span></span></span><span class="template-variable">&#123;user&#125;</span><span class="xml"><span class="tag"><span class="string">!"</span>&gt;</span></span></span><br></pre></td></tr></table></figure><h4 id="setting指令"><a href="#setting指令" class="headerlink" title="setting指令"></a>setting指令</h4><blockquote><p>该指令用于设置FreeMarker的运行环境,该指令的语法格式如下:</p></blockquote><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">#setting</span> <span class="attr">name</span>=<span class="string">value</span>&gt;</span></span><br></pre></td></tr></table></figure><p>在这个格式中,name的取值范围包含如下几个：</p><p>locale:该选项指定该模板所用的国家/语言选项 </p><p>number_format:指定格式化输出数字的格式</p><p>boolean_format:指定两个布尔值的语法格式,默认值是true,false </p><p>date_format,time_format,datetime_format:指定格式化输出日期的格式 </p><p>time_zone:设置格式化输出日期时所使用的时区</p><h4 id="自定义指令-macro指令-宏"><a href="#自定义指令-macro指令-宏" class="headerlink" title="自定义指令(macro指令)(宏)"></a>自定义指令(macro指令)(宏)</h4><p>语法：</p><figure class="highlight clean"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&lt;#macro name param1 param2 ... paramN&gt;</span><br><span class="line">...</span><br><span class="line">&lt;#nested loopvar1, loopvar2, ..., loopvarN&gt;</span><br><span class="line">...</span><br><span class="line">&lt;#return&gt;</span><br><span class="line">...</span><br><span class="line">&lt;/#macro&gt;</span><br></pre></td></tr></table></figure><p>用例：</p><figure class="highlight stata"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//定义名为test的指令</span></span><br><span class="line">&lt;#<span class="keyword">macro</span> <span class="keyword">test</span> foo bar=<span class="string">"Bar"</span> baaz=-1&gt;</span><br><span class="line">这是自定义指令: <span class="variable">$&#123;foo&#125;</span>, <span class="variable">$&#123;bar&#125;</span>, <span class="variable">$&#123;baaz&#125;</span></span><br><span class="line">&lt;/#<span class="keyword">macro</span>&gt;</span><br><span class="line"></span><br><span class="line"><span class="comment">//调用test指令</span></span><br><span class="line">&lt;@<span class="keyword">test</span> foo=<span class="string">"a"</span> bar=<span class="string">"b"</span> baaz=5*5-2/&gt; <span class="comment">//这是自定义指令: a, b, 23</span></span><br><span class="line">&lt;@<span class="keyword">test</span> foo=<span class="string">"a"</span> bar=<span class="string">"b"</span>/&gt;            <span class="comment">//这是自定义指令: a, b, -1</span></span><br><span class="line">&lt;@<span class="keyword">test</span> foo=<span class="string">"a"</span> baaz=5*5-2/&gt;         <span class="comment">//这是自定义指令: a, Bar, 23</span></span><br><span class="line">&lt;@<span class="keyword">test</span> foo=<span class="string">"a"</span>/&gt;                    <span class="comment">//这是自定义指令: a, Bar, -1</span></span><br></pre></td></tr></table></figure><blockquote><p>可以提前返回，比如&lt;#return/&gt; 但是不能&lt;#return 1&gt;， ==A macro cannot return a value== </p><p>==宏主要作用是拼接内容，把宏内部的字符串展示出来，return返回值没有意义==。</p></blockquote><h4 id="function指令-函数"><a href="#function指令-函数" class="headerlink" title="function指令(函数)"></a>function指令(函数)</h4><p>用例：</p><figure class="highlight dust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="xml"> <span class="tag">&lt;<span class="name">#function</span> <span class="attr">buildPageUrl</span> <span class="attr">url</span> <span class="attr">pageNum</span> <span class="attr">data</span>&gt;</span></span></span><br><span class="line"><span class="xml"></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;<span class="name">#assign</span> <span class="attr">pageUrl</span> = <span class="string">"$</span></span></span><span class="template-variable">&#123;url&#125;</span><span class="xml"><span class="tag"><span class="string">?pageNum=$</span></span></span><span class="template-variable">&#123;pageNum&#125;</span><span class="xml"><span class="tag"><span class="string">&amp;pageSize=$</span></span></span><span class="template-variable">&#123;data.pageSize&#125;</span><span class="xml"><span class="tag"><span class="string">"</span>&gt;</span></span></span><br><span class="line"><span class="xml"></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;<span class="name">#return</span> <span class="attr">pageUrl</span>/&gt;</span></span></span><br><span class="line"><span class="xml"></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;/<span class="name">#function</span>&gt;</span></span></span><br><span class="line"><span class="xml"></span></span><br><span class="line"><span class="xml">$</span><span class="template-variable">&#123;buildPageUrl(url2,page.pageNum+1,page)&#125;</span><span class="xml"></span></span><br></pre></td></tr></table></figure><blockquote><p>与宏的调用方式不同，直接 ${buildPageUrl(url2,page.pageNum+1,page)}执行函数。==返回值才是最关键的结果，不是为了显示函数内部的字符串内容==。</p></blockquote><h3 id="参考文章（特别鸣谢）："><a href="#参考文章（特别鸣谢）：" class="headerlink" title="参考文章（特别鸣谢）："></a>参考文章（特别鸣谢）：</h3><p><a href="https://blog.csdn.net/qq_34129814/article/details/76218863" target="_blank" rel="noopener">https://blog.csdn.net/qq_34129814/article/details/76218863</a></p><p><a href="https://segmentfault.com/a/1190000011768799" target="_blank" rel="noopener">https://segmentfault.com/a/1190000011768799</a></p><p><a href="https://blog.csdn.net/fhx007/article/details/7902040/" target="_blank" rel="noopener">https://blog.csdn.net/fhx007/article/details/7902040/</a></p><p><a href="https://www.cnblogs.com/qitian1/p/6463098.html" target="_blank" rel="noopener">https://www.cnblogs.com/qitian1/p/6463098.html</a></p><hr><blockquote><h4 id="源码地址："><a href="#源码地址：" class="headerlink" title="源码地址："></a>源码地址：</h4></blockquote><h6 id="github-https-github-com-542869246-myfreemarker"><a href="#github-https-github-com-542869246-myfreemarker" class="headerlink" title="github: https://github.com/542869246/myfreemarker"></a>github: <a href="https://github.com/542869246/myfreemarker" target="_blank" rel="noopener">https://github.com/542869246/myfreemarker</a></h6><h6 id="码云-https-gitee-com-zyf542869246-myfreemarker"><a href="#码云-https-gitee-com-zyf542869246-myfreemarker" class="headerlink" title="码云: https://gitee.com/zyf542869246/myfreemarker"></a>码云: <a href="https://gitee.com/zyf542869246/myfreemarker" target="_blank" rel="noopener">https://gitee.com/zyf542869246/myfreemarker</a></h6><hr><h6 id="Author-周宇峰"><a href="#Author-周宇峰" class="headerlink" title="Author:周宇峰"></a>Author:周宇峰</h6><h6 id="Github-https-github-com-542869246"><a href="#Github-https-github-com-542869246" class="headerlink" title="Github:https://github.com/542869246"></a>Github:<a href="https://github.com/542869246" target="_blank" rel="noopener">https://github.com/542869246</a></h6><h6 id="码云-https-gitee-com-zyf542869246"><a href="#码云-https-gitee-com-zyf542869246" class="headerlink" title="码云:https://gitee.com/zyf542869246"></a>码云:<a href="https://gitee.com/zyf542869246" target="_blank" rel="noopener">https://gitee.com/zyf542869246</a></h6><h6 id="Time-2018-5-14-1-45-11"><a href="#Time-2018-5-14-1-45-11" class="headerlink" title="Time:2018/5/14 1:45:11"></a>Time:2018/5/14 1:45:11</h6>]]></content>
    
    <summary type="html">
    
      &lt;h5 id=&quot;FreeMarker是一个很值得去学习的模版引擎。它是基于模板文件生成其他文本的通用工具。本章内容通过如何使用FreeMarker生成Html-web-页面-和-代码自动生成工具来快速了解FreeMarker。&quot;&gt;&lt;a href=&quot;#FreeMarker是一个很值得去学习的模版引擎。它是基于模板文件生成其他文本的通用工具。本章内容通过如何使用FreeMarker生成Html-web-页面-和-代码自动生成工具来快速了解FreeMarker。&quot; class=&quot;headerlink&quot; title=&quot;FreeMarker是一个很值得去学习的模版引擎。它是基于模板文件生成其他文本的通用工具。本章内容通过如何使用FreeMarker生成Html web 页面 和 代码自动生成工具来快速了解FreeMarker。&quot;&gt;&lt;/a&gt;FreeMarker是一个很值得去学习的模版引擎。它是基于模板文件生成其他文本的通用工具。本章内容通过如何使用FreeMarker生成Html web 页面 和 代码自动生成工具来快速了解FreeMarker。&lt;/h5&gt;&lt;h3 id=&quot;简介&quot;&gt;&lt;a href=&quot;#简介&quot; class=&quot;headerlink&quot; title=&quot;简介&quot;&gt;&lt;/a&gt;简介&lt;/h3&gt;&lt;p&gt;FreeMarker是一款用java语言编写的模版引擎，它虽然不是web应用框架，但它很合适作为web应用框架的一个组件。&lt;/p&gt;
    
    </summary>
    
      <category term="Java" scheme="http://yfzhou.coding.me/categories/Java/"/>
    
    
      <category term="Java" scheme="http://yfzhou.coding.me/tags/Java/"/>
    
      <category term="FreeMarker" scheme="http://yfzhou.coding.me/tags/FreeMarker/"/>
    
      <category term="模板引擎" scheme="http://yfzhou.coding.me/tags/%E6%A8%A1%E6%9D%BF%E5%BC%95%E6%93%8E/"/>
    
  </entry>
  
  <entry>
    <title>My New Project</title>
    <link href="http://yfzhou.coding.me/2018/07/30/My-New-Project/"/>
    <id>http://yfzhou.coding.me/2018/07/30/My-New-Project/</id>
    <published>2018-07-30T11:07:18.000Z</published>
    <updated>2018-08-07T12:03:52.745Z</updated>
    
    <content type="html"><![CDATA[<p>写啥好呢？</p><a id="more"></a>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;写啥好呢？&lt;/p&gt;
    
    </summary>
    
      <category term="其它" scheme="http://yfzhou.coding.me/categories/%E5%85%B6%E5%AE%83/"/>
    
    
      <category term="其它" scheme="http://yfzhou.coding.me/tags/%E5%85%B6%E5%AE%83/"/>
    
  </entry>
  
  <entry>
    <title>Hello World</title>
    <link href="http://yfzhou.coding.me/2018/07/29/hello-world/"/>
    <id>http://yfzhou.coding.me/2018/07/29/hello-world/</id>
    <published>2018-07-29T14:45:48.000Z</published>
    <updated>2018-08-07T12:03:47.366Z</updated>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.</p><a id="more"></a><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">"My New Post"</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/deployment.html" target="_blank" rel="noopener">Deployment</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Welcome to &lt;a href=&quot;https://hexo.io/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Hexo&lt;/a&gt;! This is your very first post. Check &lt;a href=&quot;https://hexo.io/docs/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;documentation&lt;/a&gt; for more info. If you get any problems when using Hexo, you can find the answer in &lt;a href=&quot;https://hexo.io/docs/troubleshooting.html&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;troubleshooting&lt;/a&gt; or you can ask me on &lt;a href=&quot;https://github.com/hexojs/hexo/issues&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;GitHub&lt;/a&gt;.&lt;/p&gt;
    
    </summary>
    
      <category term="其它" scheme="http://yfzhou.coding.me/categories/%E5%85%B6%E5%AE%83/"/>
    
    
      <category term="其它" scheme="http://yfzhou.coding.me/tags/%E5%85%B6%E5%AE%83/"/>
    
  </entry>
  
</feed>
